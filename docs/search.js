window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "safeincave", "modulename": "safeincave", "kind": "module", "doc": "<h1 id=\"safeincave\">SafeInCave</h1>\n\n<p>A FEniCSx-based 3D simulator designed to simulate the mechanical behavior of salt caverns under different operational conditions.</p>\n\n<p>This module exposes the public API for the package and\nsets version information.</p>\n"}, {"fullname": "safeincave.GridHandlerGMSH", "modulename": "safeincave", "qualname": "GridHandlerGMSH", "kind": "class", "doc": "<p>Handler for reading a Gmsh mesh into DOLFINx and exposing convenient\ngrid-related utilities (tags, regions, volumes, smoothers).</p>\n\n<p>The constructor loads the mesh, builds tag maps, extracts subdomain and\nboundary metadata, computes bounding-box dimensions, derives region-wise\nelement indices, and constructs node\u2013element smoothing operators.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>geometry_name</strong> (str):\nBase name (without extension) of the <code>.msh</code> file to read.</li>\n<li><strong>grid_folder</strong> (str):\nDirectory where the mesh file <code>{geometry_name}.msh</code> resides.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>grid_folder</strong> (str):\nMesh directory provided at construction.</li>\n<li><strong>geometry_name</strong> (str):\nMesh base name provided at construction.</li>\n<li><strong>comm</strong> (MPI.Comm):\nMPI communicator (defaults to <code>MPI.COMM_WORLD</code>).</li>\n<li><strong>rank</strong> (int):\nRank of the current process.</li>\n<li><strong>mesh</strong> (dolfinx.mesh.Mesh):\nLoaded DOLFINx mesh.</li>\n<li><strong>subdomains</strong> (dolfinx.mesh.MeshTags):\nCell (volume) tags read from the mesh.</li>\n<li><strong>boundaries</strong> (dolfinx.mesh.MeshTags):\nFacet (surface) tags read from the mesh.</li>\n<li><strong>domain_dim</strong> (int):\nTopological dimension of the mesh cells.</li>\n<li><strong>boundary_dim</strong> (int):\nDimension of boundary entities (<code>domain_dim - 1</code>).</li>\n<li><strong>n_elems</strong> (int):\nNumber of local cells including ghosts.</li>\n<li><strong>n_nodes</strong> (int):\nNumber of local vertices including ghosts.</li>\n<li><strong>tags</strong> (dict[int, dict[str, int]]):\nMapping <code>dimension -&gt; {name -&gt; tag_id}</code> parsed from the Gmsh file.</li>\n<li><strong>dolfin_tags</strong> (dict):\nAlias of <code>tags</code> for convenience.</li>\n<li><strong>subdomain_tags</strong> (dict[str, list[int]]):\nPlaceholder for subdomain-wise cell indices (filled later).</li>\n<li><strong>boundary_tags</strong> (dict[str, list[int]]):\nMapping from boundary name to list of exterior facet indices.</li>\n<li><strong>Lx, Ly, Lz</strong> (float):\nExtents of the mesh bounding box in x, y, z.</li>\n<li><strong>region_names</strong> (list[str]):\nList of subdomain (region) names.</li>\n<li><strong>n_regions</strong> (int):\nNumber of regions.</li>\n<li><strong>region_indices</strong> (dict[str, list[int]]):\nMapping from region name to list of cell indices in that region.</li>\n<li><strong>tags_dict</strong> (dict[int, str]):\nReverse mapping <code>{tag_id -&gt; region_name}</code>.</li>\n<li><strong>volumes</strong> (numpy.ndarray):\nPer-cell volumes, shape <code>(n_elems,)</code>. Created by <code>build_smoother()</code>.</li>\n<li><strong>stencil</strong> (list[list[int]]):\nNode-to-element adjacency (per-node list of incident cell indices).</li>\n<li><strong>A_csr</strong> (scipy.sparse.csr_matrix):\nNode-to-element averaging weights, shape <code>(n_nodes, n_elems)</code>.</li>\n<li><strong>B_csr</strong> (scipy.sparse.csr_matrix):\nElement-to-node averaging weights, shape <code>(n_elems, n_nodes)</code>.</li>\n<li><strong>smoother</strong> (scipy.sparse.csr_matrix):\nElement-wise smoother <code>B_csr @ A_csr</code>, shape <code>(n_elems, n_elems)</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Assumes a tetrahedral volume mesh for volume and centroid calculations.</li>\n<li>Counts (<code>n_elems</code>, <code>n_nodes</code>) include local ghosts for parallel runs.</li>\n</ul>\n"}, {"fullname": "safeincave.GridHandlerGMSH.__init__", "modulename": "safeincave", "qualname": "GridHandlerGMSH.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geometry_name</span>, </span><span class=\"param\"><span class=\"n\">grid_folder</span></span>)</span>"}, {"fullname": "safeincave.GridHandlerGMSH.grid_folder", "modulename": "safeincave", "qualname": "GridHandlerGMSH.grid_folder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.GridHandlerGMSH.geometry_name", "modulename": "safeincave", "qualname": "GridHandlerGMSH.geometry_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.GridHandlerGMSH.comm", "modulename": "safeincave", "qualname": "GridHandlerGMSH.comm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.GridHandlerGMSH.rank", "modulename": "safeincave", "qualname": "GridHandlerGMSH.rank", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.GridHandlerGMSH.build_smoother", "modulename": "safeincave", "qualname": "GridHandlerGMSH.build_smoother", "kind": "function", "doc": "<p>Construct element\u2013node smoothing operators and their product.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>A_csr : scipy.sparse.csr_matrix\n    Node-to-element weights, shape <code>(n_nodes, n_elems)</code>.\nB_csr : scipy.sparse.csr_matrix\n    Element-to-node weights, shape <code>(n_elems, n_nodes)</code>.\nsmoother : scipy.sparse.csr_matrix\n    Product <code>B_csr @ A_csr</code>, shape <code>(n_elems, n_elems)</code>.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li><code>A_csr[i, e] = vol_e / sum(vol_e' for e' in stencil[i])</code>.</li>\n<li><code>B_csr[e, i] = 1/4</code> for tetrahedra (uniform average over the 4 nodes).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.load_mesh", "modulename": "safeincave", "qualname": "GridHandlerGMSH.load_mesh", "kind": "function", "doc": "<p>Load mesh and tag metadata from a Gmsh <code>.msh</code> file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>mesh : dolfinx.mesh.Mesh\n    Sets <code>self.mesh</code>.\nsubdomains : dolfinx.mesh.MeshTags\n    Sets <code>self.subdomains</code> (cell tags).\nboundaries : dolfinx.mesh.MeshTags\n    Sets <code>self.boundaries</code> (facet tags).\ndomain_dim : int\n    Sets <code>self.domain_dim</code> from mesh topology.\nboundary_dim : int\n    Sets <code>self.boundary_dim = domain_dim - 1</code>.\nn_elems, n_nodes : int\n    Sets local counts including ghosts.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses <code>gmshio.read_from_msh(os.path.join(grid_folder, f\"{geometry_name}.msh\"), comm, rank=0)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.build_tags", "modulename": "safeincave", "qualname": "GridHandlerGMSH.build_tags", "kind": "function", "doc": "<p>Parse Gmsh field data into a dimension\u2192name\u2192tag mapping.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>dolfin_tags : dict[int, dict[str, int]]\n    Populates <code>self.dolfin_tags</code> with entries for dims 1, 2, 3.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Reads the <code>.msh</code> via <code>meshio.read</code> to access <code>field_data</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.load_subdomains", "modulename": "safeincave", "qualname": "GridHandlerGMSH.load_subdomains", "kind": "function", "doc": "<p>Initialize container for subdomain cell indices per region name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>subdomain_tags : dict[str, list[int]]\n    Initializes empty lists keyed by subdomain names.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.load_boundaries", "modulename": "safeincave", "qualname": "GridHandlerGMSH.load_boundaries", "kind": "function", "doc": "<p>Build a map from boundary name to exterior facet indices.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>boundary_tags : dict[str, list[int]]\n    Populates with facet indices for each named boundary.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses <code>mesh.exterior_facet_indices(self.mesh.topology)</code> and the facet\ntag values in <code>self.boundaries</code> to assign names via <code>self.dolfin_tags[2]</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.build_box_dimensions", "modulename": "safeincave", "qualname": "GridHandlerGMSH.build_box_dimensions", "kind": "function", "doc": "<p>Compute axis-aligned bounding-box extents (Lx, Ly, Lz).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Lx, Ly, Lz : float\n    Sets the extents along x, y, z.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_boundaries", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_boundaries", "kind": "function", "doc": "<p>Return the facet <code>MeshTags</code> object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dolfinx.mesh.MeshTags</strong>: The boundary tags read from the mesh.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_boundary_tags", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_boundary_tags", "kind": "function", "doc": "<p>Get list of exterior facet indices for a named boundary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>BOUNDARY_NAME</strong> (str or None):\nBoundary name as defined in the Gmsh field data. If <code>None</code>,\nreturns <code>None</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int] or None</strong>: Facet indices on the exterior boundary corresponding to the name,\nor <code>None</code> if <code>BOUNDARY_NAME</code> is <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">BOUNDARY_NAME</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_boundary_tag", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_boundary_tag", "kind": "function", "doc": "<p>Get the integer tag ID for a named boundary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>BOUNDARY_NAME</strong> (str or None):\nBoundary name. If <code>None</code>, returns <code>None</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int or None</strong>: Integer tag in <code>self.dolfin_tags[self.boundary_dim]</code>, or <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">BOUNDARY_NAME</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_boundary_names", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_boundary_names", "kind": "function", "doc": "<p>List all boundary names present in the mesh.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: Boundary names from <code>self.dolfin_tags[self.boundary_dim]</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_subdomain_tag", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_subdomain_tag", "kind": "function", "doc": "<p>Get the integer tag ID for a named subdomain (cell region).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>DOMAIN_NAME</strong> (str):\nSubdomain name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Integer tag for the subdomain in <code>self.dolfin_tags[self.domain_dim]</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">DOMAIN_NAME</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_subdomains", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_subdomains", "kind": "function", "doc": "<p>Return the cell <code>MeshTags</code> object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dolfinx.mesh.MeshTags</strong>: The subdomain (cell) tags read from the mesh.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_subdomain_names", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_subdomain_names", "kind": "function", "doc": "<p>List all subdomain (region) names present in the mesh.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: Subdomain names from <code>self.dolfin_tags[self.domain_dim]</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.GridHandlerGMSH.get_parameter", "modulename": "safeincave", "qualname": "GridHandlerGMSH.get_parameter", "kind": "function", "doc": "<p>Expand a parameter specification to per-element values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>param</strong> (int or float or sequence or torch.Tensor):\n<ul>\n<li>Scalar (<code>int</code>/<code>float</code>): broadcast to all elements.</li>\n<li>Sequence of length <code>n_regions</code>: values per region in the\norder of <code>self.region_indices.keys()</code>.</li>\n<li>Sequence or tensor of length <code>n_elems</code>: per-element values.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: 1D tensor of length <code>n_elems</code> with parameter values.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If <code>param</code> length is neither <code>n_regions</code> nor <code>n_elems</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Converts Python sequences to <code>torch.Tensor</code> when needed. For the\nregion-wise case, elements are filled according to\n<code>self.region_indices[region]</code> for each region name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion", "modulename": "safeincave", "qualname": "HeatDiffusion", "kind": "class", "doc": "<p>Transient heat-diffusion solver on a DOLFINx mesh.</p>\n\n<p>This class sets up the finite-element spaces, fields, measures, and linear\nsystem for the implicit \u03b8-method (backward Euler when \u03b8=1). It assembles\nthe bilinear and linear forms, applies time-dependent boundary conditions,\nand solves for the temperature increment/field at each time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grid</strong> (GridHandlerGMSH):\nGrid/mesh handler providing the DOLFINx mesh and mesh tags\n(subdomains/boundaries).</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>grid</strong> (GridHandlerGMSH):\nInput grid handler.</li>\n<li><strong>DG0_1</strong> (dolfinx.fem.FunctionSpace):\nDiscontinuous Galerkin (degree 0) space for cell-wise material fields.</li>\n<li><strong>V</strong> (dolfinx.fem.FunctionSpace):\nLagrange (degree 1) space for temperature.</li>\n<li><strong>n_elems</strong> (int):\nNumber of (local + ghost) cells in the mesh.</li>\n<li><strong>n_nodes</strong> (int):\nNumber of (local + ghost) nodes in the mesh.</li>\n<li><strong>dt</strong> (dolfinx.fem.Constant):\nTime-step parameter (as a scalar Constant on the mesh).</li>\n<li><strong>dT</strong> (ufl.trialfunctions.TrialFunction):\nTrial function in space <code>V</code> (temperature increment).</li>\n<li><strong>T_</strong> (ufl.testfunctions.TestFunction):\nTest function in space <code>V</code>.</li>\n<li><strong>ds, dx</strong> (ufl.Measure):\nBoundary and volume measures with subdomain data.</li>\n<li><strong>k, rho, cp</strong> (dolfinx.fem.Function):\nCell-wise material properties (DG0_1): conductivity, density, heat capacity.</li>\n<li><strong>T_old, T, X</strong> (dolfinx.fem.Function):\nTemperature at previous step, current temperature, and solver vector\n(all in <code>V</code>).</li>\n<li><strong>mat</strong> (Material):\nMaterial properties container (set via <code>set_material()</code>).</li>\n<li><strong>solver</strong> (petsc4py.PETSc.KSP):\nLinear solver (set via <code>set_solver()</code>).</li>\n<li><strong>bc</strong> (BcHandler):\nBoundary-condition handler (set via <code>set_boundary_conditions()</code>).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Voigt/tensor conventions are irrelevant here; only scalar temperature is solved.</li>\n<li>The class expects that a solver (<code>PETSc.KSP</code>), a material\n(<code>Material</code>), and a BC handler (<code>BcHandler</code>) are set\nbefore calling <code>solve()</code>.</li>\n</ul>\n"}, {"fullname": "safeincave.HeatDiffusion.__init__", "modulename": "safeincave", "qualname": "HeatDiffusion.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">Grid</span><span class=\"o\">.</span><span class=\"n\">GridHandlerGMSH</span></span>)</span>"}, {"fullname": "safeincave.HeatDiffusion.grid", "modulename": "safeincave", "qualname": "HeatDiffusion.grid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatDiffusion.n_elems", "modulename": "safeincave", "qualname": "HeatDiffusion.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatDiffusion.n_nodes", "modulename": "safeincave", "qualname": "HeatDiffusion.n_nodes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatDiffusion.dt", "modulename": "safeincave", "qualname": "HeatDiffusion.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatDiffusion.set_material", "modulename": "safeincave", "qualname": "HeatDiffusion.set_material", "kind": "function", "doc": "<p>Attach material properties and initialize FE fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>material</strong> (Material):\nContainer with per-element tensors/vectors (<code>k</code>, <code>density</code>, <code>cp</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Calls <code>initialize()</code> to copy material arrays into FE functions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">material</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MaterialProps</span><span class=\"o\">.</span><span class=\"n\">Material</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.set_solver", "modulename": "safeincave", "qualname": "HeatDiffusion.set_solver", "kind": "function", "doc": "<p>Set the PETSc linear solver.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>solver</strong> (petsc4py.PETSc.KSP):\nConfigured Krylov solver (e.g., with preconditioner and tolerances).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solver</span><span class=\"p\">:</span> <span class=\"n\">petsc4py</span><span class=\"o\">.</span><span class=\"n\">PETSc</span><span class=\"o\">.</span><span class=\"n\">KSP</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.set_boundary_conditions", "modulename": "safeincave", "qualname": "HeatDiffusion.set_boundary_conditions", "kind": "function", "doc": "<p>Set the boundary-condition handler.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bc</strong> (BcHandler):\nBoundary-condition manager providing Dirichlet, Neumann, and Robin\ncontributions and update routines.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bc</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">HeatBC</span><span class=\"o\">.</span><span class=\"n\">BcHandler</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.create_trial_test_functions", "modulename": "safeincave", "qualname": "HeatDiffusion.create_trial_test_functions", "kind": "function", "doc": "<p>Create trial and test functions in <code>V</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>dT</code> and <code>T_</code> as UFL trial/test functions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.create_function_spaces", "modulename": "safeincave", "qualname": "HeatDiffusion.create_function_spaces", "kind": "function", "doc": "<p>Build function spaces for materials (DG0) and temperature (P1).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>DG0_1</code> and <code>V</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.create_ds_dx", "modulename": "safeincave", "qualname": "HeatDiffusion.create_ds_dx", "kind": "function", "doc": "<p>Create UFL measures with subdomain data for integration.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>ds</code> for boundary integrals and <code>dx</code> for domain integrals,\nusing mesh tags from <code>grid</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.create_fenicsx_fields", "modulename": "safeincave", "qualname": "HeatDiffusion.create_fenicsx_fields", "kind": "function", "doc": "<p>Allocate DOLFINx Functions for material and temperature fields.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Creates <code>k</code>, <code>rho</code>, <code>cp</code> in <code>DG0_1</code> and\n<code>T_old</code>, <code>T</code>, <code>X</code> in <code>V</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.initialize", "modulename": "safeincave", "qualname": "HeatDiffusion.initialize", "kind": "function", "doc": "<p>Copy material arrays into FE functions (<code>k</code>, <code>rho</code>, <code>cp</code>).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Writes into <code>self.k.x.array</code>, <code>self.rho.x.array</code>, and <code>self.cp.x.array</code>\nfrom the arrays stored in <code>mat</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.split_solution", "modulename": "safeincave", "qualname": "HeatDiffusion.split_solution", "kind": "function", "doc": "<p>Assign the solver vector <code>X</code> to the temperature field <code>T</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This sets <code>self.T = self.X</code> (rebinds the reference), rather than copying\nunderlying arrays. If you need a deep copy, copy <code>self.X.x.array</code> into\n<code>self.T.x.array</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.update_T_old", "modulename": "safeincave", "qualname": "HeatDiffusion.update_T_old", "kind": "function", "doc": "<p>Copy the current temperature into the <code>T_old</code> storage.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Overwrites <code>self.T_old.x.array</code> with <code>self.T.x.array</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.set_initial_T", "modulename": "safeincave", "qualname": "HeatDiffusion.set_initial_T", "kind": "function", "doc": "<p>Initialize both current and previous temperature fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>T_field</strong> (torch.Tensor):\nTemperature values for all nodal DOFs (shape <code>(n_nodes,)</code> or compatible).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Writes into <code>self.T_old.x.array</code> and <code>self.T.x.array</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">T_field</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.get_T_elems", "modulename": "safeincave", "qualname": "HeatDiffusion.get_T_elems", "kind": "function", "doc": "<p>Project the nodal temperature to DG0 and return as a torch tensor.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Cell-wise constant temperature values of length <code>n_elems</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses <code>Utils.project()</code> to project <code>T</code> onto <code>DG0_1</code> and\n<code>Utils.numpy2torch()</code> to convert to a Torch tensor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatDiffusion.solve", "modulename": "safeincave", "qualname": "HeatDiffusion.solve", "kind": "function", "doc": "<p>Assemble and solve one implicit time step.</p>\n\n<p>The method:</p>\n\n<ol>\n<li>Update boundary conditions at time <code>t</code> via <code>BcHandler</code>.</li>\n<li>Set the time-step constant <code>dt</code>.</li>\n<li>Assemble the bilinear form \\( (\\rho c_p / \\Delta t) (dT, T_) + (k \\nabla dT, \\nabla T_) \\) plus Robin terms.</li>\n<li>Assemble the right-hand side \\( (\\rho c_p / \\Delta t) (T_{old}, T_) \\) plus Neumann and Robin terms.</li>\n<li>Apply Dirichlet BCs, solve the linear system for <code>X</code>, and update <code>T</code> and <code>T_old</code>.</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent time at which boundary conditions are evaluated.</li>\n<li><strong>dt</strong> (float):\nTime-step size to advance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AttributeError</strong>: If solver, BC handler, or material fields are not set.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The linear system is solved via the user-provided <code>PETSc.KSP</code>.</li>\n<li>Dirichlet conditions are enforced strongly; Neumann/Robin are added\nto the forms via the handler lists.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase", "modulename": "safeincave", "qualname": "LinearMomentumBase", "kind": "class", "doc": "<p>Abstract base for a thermo-(visco)elastic linear momentum solver on a DOLFINx mesh.</p>\n\n<p>Sets up common FE spaces, measures, and fields; provides utilities for\nassembling body forces, computing invariants, and coordinating inelastic\nelements via the <code>Material</code> container. Concrete subclasses supply the\nvariational forms and solve routines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grid</strong> (GridHandlerGMSH):\nMesh/grid handler that provides the DOLFINx mesh and meshtags.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter: 0 for fully implicit, 0.5 for Crank-Nicolson, 1 for explicit.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>grid</strong> (GridHandlerGMSH):\nInput grid handler.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter.</li>\n<li><strong>DG0_1, CG1_1</strong> (dolfinx.fem.FunctionSpace):\nScalar DG0 (per element) and CG1 (per node) spaces.</li>\n<li><strong>CG1_3x1</strong> (dolfinx.fem.FunctionSpace):\nVector CG1 space of size equal to the spatial dimension.</li>\n<li><strong>DG0_3x3, DG0_6x6</strong> (dolfinx.fem.FunctionSpace):\nTensor DG0 spaces for 3\u00d73 and 6\u00d76 (Voigt) fields.</li>\n<li><strong>n_elems</strong> (int):\nNumber of local+ghost elements.</li>\n<li><strong>n_nodes</strong> (int):\nNumber of local+ghost nodes.</li>\n<li><strong>u</strong> (dolfinx.fem.Function):\nDisplacement field (vector).</li>\n<li><strong>sig, eps_tot</strong> (dolfinx.fem.Function):\nStress and total strain (DG0 3\u00d73 tensors).</li>\n<li><strong>q_nodes, q_elems, p_nodes, p_elems</strong> (dolfinx.fem.Function):\nVon Mises magnitude and pressure in node/element spaces.</li>\n<li><strong>Temp, T0</strong> (torch.Tensor):\nCurrent and reference temperatures per element, shape <code>(n_elems,)</code>.</li>\n<li><strong>normal</strong> (ufl.core.expr.Expr):\nTest-function-weighted outward normal used for Neumann terms.</li>\n<li><strong>ds, dx</strong> (ufl.Measure):\nBoundary and domain measures with subdomain data.</li>\n<li><strong>X</strong> (dolfinx.fem.Function):\nSolution vector (same space as <code>get_uV()()</code>).</li>\n<li><strong>mat</strong> (Material):\nMaterial container (set via <code>set_material()</code>).</li>\n<li><strong>solver</strong> (petsc4py.PETSc.KSP):\nPETSc linear solver (set via <code>set_solver()</code>).</li>\n<li><strong>bc</strong> (BcHandler):\nBoundary-condition handler (set via <code>set_boundary_conditions()</code>).</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "safeincave.LinearMomentumBase.grid", "modulename": "safeincave", "qualname": "LinearMomentumBase.grid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.LinearMomentumBase.theta", "modulename": "safeincave", "qualname": "LinearMomentumBase.theta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.LinearMomentumBase.n_elems", "modulename": "safeincave", "qualname": "LinearMomentumBase.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.LinearMomentumBase.n_nodes", "modulename": "safeincave", "qualname": "LinearMomentumBase.n_nodes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.LinearMomentumBase.commom_fields", "modulename": "safeincave", "qualname": "LinearMomentumBase.commom_fields", "kind": "function", "doc": "<p>Allocate common storage for temperature, stresses, and strains.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Initializes tensors/functions:\n<code>T0</code>, <code>Temp</code>, <code>sig</code>, <code>eps_tot</code>, <code>u</code>, <code>q_elems</code>, <code>q_nodes</code>, <code>p_elems</code>, <code>p_nodes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.set_material", "modulename": "safeincave", "qualname": "LinearMomentumBase.set_material", "kind": "function", "doc": "<p>Attach a material model and initialize FE fields from it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>material</strong> (Material):\nMaterial container with elastic and non-elastic elements.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Calls <code>initialize()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">material</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MaterialProps</span><span class=\"o\">.</span><span class=\"n\">Material</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.set_T", "modulename": "safeincave", "qualname": "LinearMomentumBase.set_T", "kind": "function", "doc": "<p>Set the current element-wise temperature.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>T</strong> (torch.Tensor):\nTemperature per element, shape <code>(n_elems,)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.set_T0", "modulename": "safeincave", "qualname": "LinearMomentumBase.set_T0", "kind": "function", "doc": "<p>Set the reference element-wise temperature.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>T0</strong> (torch.Tensor):\nReference temperature per element, shape <code>(n_elems,)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">T0</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.set_solver", "modulename": "safeincave", "qualname": "LinearMomentumBase.set_solver", "kind": "function", "doc": "<p>Set the PETSc linear solver.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>solver</strong> (petsc4py.PETSc.KSP):\nPreconfigured Krylov solver.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solver</span><span class=\"p\">:</span> <span class=\"n\">petsc4py</span><span class=\"o\">.</span><span class=\"n\">PETSc</span><span class=\"o\">.</span><span class=\"n\">KSP</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.set_boundary_conditions", "modulename": "safeincave", "qualname": "LinearMomentumBase.set_boundary_conditions", "kind": "function", "doc": "<p>Set the boundary-condition handler.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bc</strong> (BcHandler):\nHandler providing Dirichlet/Neumann terms and updates.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bc</span><span class=\"p\">:</span> <span class=\"s1\">&#39;BcHandler&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_function_spaces", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_function_spaces", "kind": "function", "doc": "<p>Create function spaces used by the formulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>CG1_3x1</code>, <code>DG0_1</code>, <code>CG1_1</code>,\n<code>DG0_3x3</code>, and <code>DG0_6x6</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_ds_dx", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_ds_dx", "kind": "function", "doc": "<p>Create boundary and domain measures with subdomain data.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>ds</code> and <code>dx</code> from grid meshtags.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_normal", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_normal", "kind": "function", "doc": "<p>Create a test-function-weighted outward normal for surface terms.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>normal</code> as <code>dot(FacetNormal(mesh), self.u_)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.build_body_force", "modulename": "safeincave", "qualname": "LinearMomentumBase.build_body_force", "kind": "function", "doc": "<p>Build the body-force linear form <code>\u222b \u03c1 g \u00b7 u_ dx</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>g</strong> (list of float):\nGravity/body acceleration vector components.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>b_body</code> as a UFL form for the right-hand side.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_q_nodes", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_q_nodes", "kind": "function", "doc": "<p>Compute von Mises equivalent stress and smooth it to nodes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>q_nodes</code> by applying a node-element averaging matrix\n(<code>grid.A_csr</code>) to the element-wise von Mises values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_q_elems", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_q_elems", "kind": "function", "doc": "<p>Compute von Mises equivalent stress and smooth it to elements.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>q_elems</code> by applying <code>grid.smoother</code> to nodal values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_total_strain", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_total_strain", "kind": "function", "doc": "<p>Project total small-strain tensor to DG0 and return as torch.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Total strain per element, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses <code>project()</code> on <code>\u03b5(u)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_eps_th", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_eps_th", "kind": "function", "doc": "<p>Compute element-wise thermal strain by aggregating thermoelastic elements.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Thermal strain per element, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_eps_ne_k", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_eps_ne_k", "kind": "function", "doc": "<p>Compute predictor of non-elastic strain at the previous iteration k.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Predicted non-elastic strain per element, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_eps_ne_rate", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_eps_ne_rate", "kind": "function", "doc": "<p>Update non-elastic strain rate for all non-elastic elements.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.update_eps_ne_rate_old", "modulename": "safeincave", "qualname": "LinearMomentumBase.update_eps_ne_rate_old", "kind": "function", "doc": "<p>Update non-elastic strain rate from the previous time step \u201cold\u201d.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.update_eps_ne_old", "modulename": "safeincave", "qualname": "LinearMomentumBase.update_eps_ne_old", "kind": "function", "doc": "<p>Update non-elastic strain tensor from the previous time step \u201cold\u201d.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress at current iteration k+1, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>stress_k</strong> (torch.Tensor):\nStress from previous iteration k, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.increment_internal_variables", "modulename": "safeincave", "qualname": "LinearMomentumBase.increment_internal_variables", "kind": "function", "doc": "<p>Increment material internal variables (e.g., hardening).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>stress</strong> (torch.Tensor):</p></li>\n<li><p><strong>stress_k</strong> (torch.Tensor):</p></li>\n<li><p><strong>dt</strong> (float):</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.update_internal_variables", "modulename": "safeincave", "qualname": "LinearMomentumBase.update_internal_variables", "kind": "function", "doc": "<p>Commit internal variables at the end of a time step.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_solution_vector", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_solution_vector", "kind": "function", "doc": "<p>Allocate the solution function <code>X</code> in the primary space.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>X</code> as a <code>dolfinx.fem.Function(self.V)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.run_after_solve", "modulename": "safeincave", "qualname": "LinearMomentumBase.run_after_solve", "kind": "function", "doc": "<p>Optional hook called after each linear solve.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_CT", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_CT", "kind": "function", "doc": "<p>Build the consistent tangent operator (per element).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n<li><strong>stress_k</strong> (torch.Tensor):\nStress from previous iteration k, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_eps_rhs", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_eps_rhs", "kind": "function", "doc": "<p>Compute the right-hand-side strain term used in the linear form.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n<li><strong>stress_k</strong> (torch.Tensor):\nIntermediate stress, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>eps_k</strong> (torch.Tensor):\nOptional strain input for schemes that need it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">eps_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_elastic_stress", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_elastic_stress", "kind": "function", "doc": "<p>Compute elastic stress from elastic strain using <code>C</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eps_e</strong> (torch.Tensor):\nElastic strain, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Stress, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eps_e</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_stress", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_stress", "kind": "function", "doc": "<p>Compute stress from total strain and RHS strain (and optionally pressure).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eps_tot</strong> (torch.Tensor):\nTotal strain, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>eps_rhs</strong> (torch.Tensor):\nRHS strain term, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>p</strong> (torch.Tensor):\nOptional pressure term.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Stress, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eps_tot</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">eps_rhs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_fenicsx_fields", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_fenicsx_fields", "kind": "function", "doc": "<p>Create FE functions specific to the concrete formulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_pytorch_fields", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_pytorch_fields", "kind": "function", "doc": "<p>Create torch tensors specific to the concrete formulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.create_trial_test_functions", "modulename": "safeincave", "qualname": "LinearMomentumBase.create_trial_test_functions", "kind": "function", "doc": "<p>Create UFL trial and test functions in the primary space.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.get_uV", "modulename": "safeincave", "qualname": "LinearMomentumBase.get_uV", "kind": "function", "doc": "<p>Return the primary function space for displacements.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dolfinx.fem.FunctionSpace</strong>: Vector function space used for <code>u</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dolfinx</span><span class=\"o\">.</span><span class=\"n\">fem</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">FunctionSpace</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.initialize", "modulename": "safeincave", "qualname": "LinearMomentumBase.initialize", "kind": "function", "doc": "<p>Initialize FE fields from the material container.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.split_solution", "modulename": "safeincave", "qualname": "LinearMomentumBase.split_solution", "kind": "function", "doc": "<p>Duplicate abstract declaration (kept for API compatibility).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.compute_p_nodes", "modulename": "safeincave", "qualname": "LinearMomentumBase.compute_p_nodes", "kind": "function", "doc": "<p>Compute nodal pressure (mean stress) from the stress field.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.solve_elastic_response", "modulename": "safeincave", "qualname": "LinearMomentumBase.solve_elastic_response", "kind": "function", "doc": "<p>Solve the purely elastic problem (e.g., for initialization).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentumBase.solve", "modulename": "safeincave", "qualname": "LinearMomentumBase.solve", "kind": "function", "doc": "<p>Assemble and solve one step of the inelastic problem.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum", "modulename": "safeincave", "qualname": "LinearMomentum", "kind": "class", "doc": "<p>Linear momentum formulation with thermo-(visco)elastic tangent.</p>\n\n<p>Implements the concrete FE fields, consistent tangent assembly, right-hand\nside strain, and linear solves for both elastic and inelastic steps.</p>\n", "bases": "safeincave.MomentumEquation.LinearMomentumBase"}, {"fullname": "safeincave.LinearMomentum.__init__", "modulename": "safeincave", "qualname": "LinearMomentum.__init__", "kind": "function", "doc": "<p>Initialize spaces, measures, fields, and solution vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>grid</strong> (GridHandlerGMSH):</p></li>\n<li><p><strong>theta</strong> (float):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">Grid</span><span class=\"o\">.</span><span class=\"n\">GridHandlerGMSH</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "safeincave.LinearMomentum.V", "modulename": "safeincave", "qualname": "LinearMomentum.V", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.LinearMomentum.create_fenicsx_fields", "modulename": "safeincave", "qualname": "LinearMomentum.create_fenicsx_fields", "kind": "function", "doc": "<p>Allocate FE functions specific to this formulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Creates <code>C</code>, <code>CT</code> (DG0 6\u00d76 tangents), and <code>eps_rhs</code>\n(DG0 3\u00d73 RHS strain).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.create_pytorch_fields", "modulename": "safeincave", "qualname": "LinearMomentum.create_pytorch_fields", "kind": "function", "doc": "<p>Allocate torch tensors specific to this formulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Creates <code>eps_rhs_to</code> with shape <code>(n_elems, 3, 3)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.create_trial_test_functions", "modulename": "safeincave", "qualname": "LinearMomentum.create_trial_test_functions", "kind": "function", "doc": "<p>Create UFL trial/test functions for displacement.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Defines <code>du</code> (trial) and <code>u_</code> (test) in <code>V</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.get_uV", "modulename": "safeincave", "qualname": "LinearMomentum.get_uV", "kind": "function", "doc": "<p>Return the primary displacement function space.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dolfinx.fem.FunctionSpace</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dolfinx</span><span class=\"o\">.</span><span class=\"n\">fem</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">FunctionSpace</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.initialize", "modulename": "safeincave", "qualname": "LinearMomentum.initialize", "kind": "function", "doc": "<p>Initialize elastic tangent from the material container.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Flattens and copies <code>mat.C</code> into <code>C</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.compute_CT", "modulename": "safeincave", "qualname": "LinearMomentum.compute_CT", "kind": "function", "doc": "<p>Assemble consistent tangent operator <code>CT</code> for the current step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress_k</strong> (torch.Tensor):\nStress from previous iteration k, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Updates material operators (<code>G</code>, <code>B</code>, <code>CT</code>) and copies to FE field <code>CT</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.compute_elastic_stress", "modulename": "safeincave", "qualname": "LinearMomentum.compute_elastic_stress", "kind": "function", "doc": "<p>Compute elastic Cauchy stress using the elastic stiffness <code>C</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eps_e</strong> (torch.Tensor):\nElastic strain, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Stress, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Copies the stress into <code>sig</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eps_e</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.compute_stress", "modulename": "safeincave", "qualname": "LinearMomentum.compute_stress", "kind": "function", "doc": "<p>Compute stress using the consistent tangent and RHS strain.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eps_tot_to</strong> (torch.Tensor):\nTotal strain, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>*_</strong>: Unused extra arguments (kept for signature compatibility).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Stress, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Copies the stress into <code>sig</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eps_tot_to</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">_</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.compute_eps_rhs", "modulename": "safeincave", "qualname": "LinearMomentum.compute_eps_rhs", "kind": "function", "doc": "<p>Compute the right-hand-side strain term for the variational form.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n<li><strong>stress_k</strong> (torch.Tensor):\nIntermediate stress, shape <code>(n_elems, 3, 3)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>eps_rhs_to</code> (torch) and <code>eps_rhs</code> (FE field).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.solve_elastic_response", "modulename": "safeincave", "qualname": "LinearMomentum.solve_elastic_response", "kind": "function", "doc": "<p>Solve the purely elastic boundary-value problem.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<ul>\n<li>Assembles and solves the linear system with \\( C \\).</li>\n<li>Updates <code>X</code> and calls <code>split_solution()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.split_solution", "modulename": "safeincave", "qualname": "LinearMomentum.split_solution", "kind": "function", "doc": "<p>Assign displacement solution <code>X</code> to the primary field <code>u</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.compute_p_nodes", "modulename": "safeincave", "qualname": "LinearMomentum.compute_p_nodes", "kind": "function", "doc": "<p>Compute nodal pressure <code>p = tr(\u03c3)/3</code> via node-element averaging.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Writes to <code>p_nodes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.compute_p_elems", "modulename": "safeincave", "qualname": "LinearMomentum.compute_p_elems", "kind": "function", "doc": "<p>Compute element pressure by smoothing the nodal trace of stress.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Writes to <code>p_elems</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.LinearMomentum.solve", "modulename": "safeincave", "qualname": "LinearMomentum.solve", "kind": "function", "doc": "<p>Assemble and solve one implicit time step for the inelastic problem.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress_k_to</strong> (torch.Tensor):\nStress at previous iteration k, shape <code>(n_elems, 3, 3)</code>.</li>\n<li><strong>t</strong> (float):\nCurrent time (used by BC handler externally).</li>\n<li><strong>dt</strong> (float):\nTime-step size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<ul>\n<li>Builds <code>CT</code> and <code>eps_rhs</code>, assembles and solves the linear system.</li>\n<li>Updates <code>X</code>, calls <code>split_solution()</code>, then <code>run_after_solve()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress_k_to</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material", "modulename": "safeincave", "qualname": "Material", "kind": "class", "doc": "<p>Composite material model that aggregates elastic, thermoelastic,\nand non-elastic (e.g., viscoelastic/viscoplastic) elements.</p>\n\n<p>The class stores element-wise stiffness operators in Voigt form\nand assembles effective operators used during constitutive updates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_elems</strong> (int):\nNumber of finite elements (batch size).</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>n_elems</strong> (int):\nNumber of elements.</li>\n<li><strong>elems_ne</strong> (list[NonElasticElement]):\nCollection of non-elastic elements contributing to non-elastic response.</li>\n<li><strong>elems_th</strong> (list[Thermoelastic]):\nCollection of thermoelastic contributors (thermal strain).</li>\n<li><strong>elems_e</strong> (list[Spring]):\nCollection of elastic contributors (linear isotropic springs).</li>\n<li><strong>C_inv, C</strong> (torch.Tensor):\nElement-wise stiffness (and inverse) in tensorial Voigt form, shape (N, 6, 6).</li>\n<li><strong>C_tilde_inv, C_tilde</strong> (torch.Tensor):\nElement-wise deviatoric stiffness (and inverse), shape (N, 6, 6).</li>\n<li><strong>G, B</strong> (torch.Tensor):\nAssembled non-elastic tangent-like (G) and state variable (B) operators, shapes\n(N, 6, 6) and (N, 3, 3).</li>\n<li><strong>IT, T</strong> (torch.Tensor):\nVolumetric coupling tensors assembled from non-elastic elements.</li>\n<li><strong>B_vol, T_vol</strong> (torch.Tensor):\nElement-wise volumetric parts (scalars), shape (N,).</li>\n<li><strong>G_tilde, B_tilde</strong> (torch.Tensor):\nDeviatoric parts of G and B, shapes (N, 6, 6) and (N, 3, 3).</li>\n<li><strong>CT, CT_tilde</strong> (torch.Tensor):\nEffective consistent tangents after time integration, shapes (N, 6, 6).</li>\n<li><strong>density, cp, k, alpha_th</strong> (torch.Tensor):\nOptional material properties (per element).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Voigt ordering is assumed to be <code>[xx, yy, zz, xy, xz, yz]</code> with\n<strong>tensorial shear</strong> convention (no engineering factors).</li>\n</ul>\n"}, {"fullname": "safeincave.Material.__init__", "modulename": "safeincave", "qualname": "Material.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_elems</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "safeincave.Material.n_elems", "modulename": "safeincave", "qualname": "Material.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.elems_ne", "modulename": "safeincave", "qualname": "Material.elems_ne", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.elems_th", "modulename": "safeincave", "qualname": "Material.elems_th", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.elems_e", "modulename": "safeincave", "qualname": "Material.elems_e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.C_inv", "modulename": "safeincave", "qualname": "Material.C_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.C", "modulename": "safeincave", "qualname": "Material.C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.C_tilde_inv", "modulename": "safeincave", "qualname": "Material.C_tilde_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.C_tilde", "modulename": "safeincave", "qualname": "Material.C_tilde", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Material.set_density", "modulename": "safeincave", "qualname": "Material.set_density", "kind": "function", "doc": "<p>Set mass density per element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>density</strong> (torch.Tensor):\n1D tensor of shape (N,) with densities.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">density</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.set_specific_heat_capacity", "modulename": "safeincave", "qualname": "Material.set_specific_heat_capacity", "kind": "function", "doc": "<p>Set specific heat capacity per element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cp</strong> (torch.Tensor):\n1D tensor of shape (N,) with specific heat capacities.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.set_thermal_conductivity", "modulename": "safeincave", "qualname": "Material.set_thermal_conductivity", "kind": "function", "doc": "<p>Set thermal conductivity per element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k</strong> (torch.Tensor):\n1D tensor of shape (N,) with conductivities.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.set_thermal_expansion", "modulename": "safeincave", "qualname": "Material.set_thermal_expansion", "kind": "function", "doc": "<p>Set coefficient of thermal expansion per element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_th</strong> (torch.Tensor):\n1D tensor of shape (N,) with linear thermal expansion coefficients.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">alpha_th</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.add_to_elastic", "modulename": "safeincave", "qualname": "Material.add_to_elastic", "kind": "function", "doc": "<p>Add an elastic (linear isotropic) contributor and accumulate stiffness.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>elem</strong> (Spring):\nElastic element. Its <code>initialize()</code> is called inside.</li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<ul>\n<li>Updates <code>C</code>, <code>C_inv</code>, <code>C_tilde</code>, <code>C_tilde_inv</code> by addition.</li>\n<li>Stores <code>K</code>, <code>E</code>, and shear modulus estimate <code>ShearMod</code>.</li>\n<li>Appends <code>elem</code> to <code>elems_e</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MaterialProps</span><span class=\"o\">.</span><span class=\"n\">Spring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.add_to_non_elastic", "modulename": "safeincave", "qualname": "Material.add_to_non_elastic", "kind": "function", "doc": "<p>Add a non-elastic element contributor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>elem</strong> (NonElasticElement):\nInelastic mechanism (e.g., creep, viscoplasticity).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MaterialProps</span><span class=\"o\">.</span><span class=\"n\">NonElasticElement</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.add_to_thermoelastic", "modulename": "safeincave", "qualname": "Material.add_to_thermoelastic", "kind": "function", "doc": "<p>Add a thermoelastic contributor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>elem</strong> (Thermoelastic):\nProvides thermal strain contributions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MaterialProps</span><span class=\"o\">.</span><span class=\"n\">Thermoelastic</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.compute_G_B", "modulename": "safeincave", "qualname": "Material.compute_G_B", "kind": "function", "doc": "<p>Assemble non-elastic operators G and B over all inelastic elements.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nCurrent Cauchy stress per element, shape (N, 3, 3).</li>\n<li><strong>dt</strong> (float):\nTime step size.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter: 0 for fully implicit, 0.5 for Crank-Nicolson, 1 for explicit.</li>\n<li><strong>T</strong> (torch.Tensor):\nTemperature per element (shape (N,) or compatible).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.G</code> (N,6,6) and <code>self.B</code> (N,3,3) as sums of element contributions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.compute_T_IT", "modulename": "safeincave", "qualname": "Material.compute_T_IT", "kind": "function", "doc": "<p>Assemble volumetric coupling tensors T and IT from inelastic elements.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.T</code> (N,3,3) and <code>self.IT</code> (N,6,6) as sums of element contributions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.compute_Bvol_Tvol", "modulename": "safeincave", "qualname": "Material.compute_Bvol_Tvol", "kind": "function", "doc": "<p>Compute volumetric parts of B and T.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3). (Not used directly here.)</li>\n<li><strong>dt</strong> (float):\nTime step size. (Not used directly here.)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.B_vol</code> and <code>self.T_vol</code> (shape (N,)) from element contributions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.compute_Gtilde_Btilde", "modulename": "safeincave", "qualname": "Material.compute_Gtilde_Btilde", "kind": "function", "doc": "<p>Compute deviatoric parts of G and B.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3). (Not used directly here.)</li>\n<li><strong>dt</strong> (float):\nTime step size. (Not used directly here.)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.G_tilde</code> and <code>self.B_tilde</code> (N,6,6) and (N,3,3).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.compute_CT", "modulename": "safeincave", "qualname": "Material.compute_CT", "kind": "function", "doc": "<p>Compute consistent tangent <code>CT = (C_inv + dt*(1-theta)*G)^{-1}</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong> (float):\nTime step size.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter: 0 for fully implicit, 0.5 for Crank-Nicolson, 1 for explicit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.CT</code> (N, 6, 6).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Material.compute_CT_tilde", "modulename": "safeincave", "qualname": "Material.compute_CT_tilde", "kind": "function", "doc": "<p>Compute deviatoric consistent tangent <code>CT_tilde</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong> (float):\nTime step size.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter in [0, 1].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.CT_tilde</code> (N, 6, 6).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement", "modulename": "safeincave", "qualname": "NonElasticElement", "kind": "class", "doc": "<p>Abstract base for inelastic mechanisms (e.g., viscoelasticity,\ndislocation creep, viscoplasticity). Provides common storage\nand utility updates for internal variables.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_elems</strong> (int):\nNumber of elements.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>n_elems</strong> (int):\nNumber of elements.</li>\n<li><strong>eps_ne_rate, eps_ne_rate_old</strong> (torch.Tensor):\nCurrent and previous non-elastic strain rate, shape (N, 3, 3).</li>\n<li><strong>eps_ne_old, eps_ne_k</strong> (torch.Tensor):\nNon-elastic strain at old and current time, shape (N, 3, 3).</li>\n<li><strong>B</strong> (torch.Tensor):\nState variable term (N, 3, 3) assembled in <code>compute_G_B</code>.</li>\n<li><strong>G</strong> (torch.Tensor):\nTangent-like operator (N, 6, 6) assembled in <code>compute_G_B</code>.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "safeincave.NonElasticElement.n_elems", "modulename": "safeincave", "qualname": "NonElasticElement.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.eps_ne_rate", "modulename": "safeincave", "qualname": "NonElasticElement.eps_ne_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.eps_ne_rate_old", "modulename": "safeincave", "qualname": "NonElasticElement.eps_ne_rate_old", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.eps_ne_old", "modulename": "safeincave", "qualname": "NonElasticElement.eps_ne_old", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.eps_ne_k", "modulename": "safeincave", "qualname": "NonElasticElement.eps_ne_k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.B", "modulename": "safeincave", "qualname": "NonElasticElement.B", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.G", "modulename": "safeincave", "qualname": "NonElasticElement.G", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.NonElasticElement.compute_eps_ne_rate", "modulename": "safeincave", "qualname": "NonElasticElement.compute_eps_ne_rate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress_vec</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">phi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">return_eps_ne</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.increment_internal_variables", "modulename": "safeincave", "qualname": "NonElasticElement.increment_internal_variables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.update_internal_variables", "modulename": "safeincave", "qualname": "NonElasticElement.update_internal_variables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_eps_ne_k", "modulename": "safeincave", "qualname": "NonElasticElement.compute_eps_ne_k", "kind": "function", "doc": "<p>Predictor for non-elastic strain at the previous iteration k.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phi1</strong> (float):\nTypically <code>phi1=dt*theta</code>.</li>\n<li><strong>phi2</strong> (float):\nTypically <code>phi2=dt*(1-theta)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.eps_ne_k</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">phi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">phi2</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.update_eps_ne_old", "modulename": "safeincave", "qualname": "NonElasticElement.update_eps_ne_old", "kind": "function", "doc": "<p>Update non-elastic strain from previous time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress at current iteration k+1, shape (N, 3, 3).</li>\n<li><strong>stress_k</strong> (torch.Tensor):\nStress at previous iteration k, shape (N, 3, 3).</li>\n<li><strong>phi2</strong> (float):\nTypically <code>phi2=dt*(1-theta)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Updates <code>self.eps_ne_old</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">phi2</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.update_eps_ne_rate_old", "modulename": "safeincave", "qualname": "NonElasticElement.update_eps_ne_rate_old", "kind": "function", "doc": "<p>Update the current non-nelastic strain rate to the previous time step.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_E", "modulename": "safeincave", "qualname": "NonElasticElement.compute_E", "kind": "function", "doc": "<p>Finite-difference approximation of the 6\u00d76 operator E = d(eps_ne)/d(stress).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3).</li>\n<li><strong>dt</strong> (float):\nTime step.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter.</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Operator <code>E</code> with shape (N, 6, 6).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_B_and_H_over_h", "modulename": "safeincave", "qualname": "NonElasticElement.compute_B_and_H_over_h", "kind": "function", "doc": "<p>Compute state variable term <code>B</code> and linearization term <code>H/h</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3).</li>\n<li><strong>dt</strong> (float):\nTime step.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter.</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B</strong> (torch.Tensor):\nDriving term, shape (N, 3, 3).</li>\n<li><strong>H_over_h</strong> (torch.Tensor):\nLinearization ratio, shape (N, 6, 6).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Default implementation returns zeros; subclasses override.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_G_B", "modulename": "safeincave", "qualname": "NonElasticElement.compute_G_B", "kind": "function", "doc": "<p>Assemble <code>G</code> and <code>B</code> for the element based on <code>E</code> and <code>H/h</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>stress</strong> (torch.Tensor):</p></li>\n<li><p><strong>dt</strong> (float):</p></li>\n<li><p><strong>theta</strong> (float):</p></li>\n<li><p><strong>Temp</strong> (torch.Tensor):</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.B</code> and <code>self.G</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_T_IT", "modulename": "safeincave", "qualname": "NonElasticElement.compute_T_IT", "kind": "function", "doc": "<p>Build volumetric coupling tensors <code>T</code> (3\u00d73) and <code>IT</code> (6\u00d76) from <code>G</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.T</code> and <code>self.IT</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_Bvol_Tvol", "modulename": "safeincave", "qualname": "NonElasticElement.compute_Bvol_Tvol", "kind": "function", "doc": "<p>Compute volumetric parts of <code>B</code> and <code>T</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.B_vol</code> and <code>self.T_vol</code> as traces of <code>B</code> and <code>T</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.NonElasticElement.compute_Gtilde_Btilde", "modulename": "safeincave", "qualname": "NonElasticElement.compute_Gtilde_Btilde", "kind": "function", "doc": "<p>Compute deviatoric parts <code>G_tilde</code> and <code>B_tilde</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.G_tilde</code> and <code>self.B_tilde</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Spring", "modulename": "safeincave", "qualname": "Spring", "kind": "class", "doc": "<p>Linear isotropic elastic element in Voigt notation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>E</strong> (torch.Tensor):\nYoung's modulus per element, shape (N,).</li>\n<li><strong>nu</strong> (torch.Tensor):\nPoisson's ratio per element, shape (N,).</li>\n<li><strong>name</strong> (str, optional):\nElement name, by default \"spring\".</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>E, nu</strong> (torch.Tensor):\nMaterial parameters, shape (N,).</li>\n<li><strong>n_elems</strong> (int):\nNumber of elements.</li>\n<li><strong>C, C_inv</strong> (torch.Tensor):\nStiffness and its inverse in tensorial Voigt form, shape (N, 6, 6).</li>\n<li><strong>C_tilde, C_tilde_inv</strong> (torch.Tensor):\nDeviatoric stiffness and inverse, shape (N, 6, 6).</li>\n<li><strong>K</strong> (torch.Tensor):\nBulk modulus per element, shape (N,).</li>\n<li><strong>eps_e</strong> (torch.Tensor):\nElastic strain tensor per element, shape (N, 3, 3).</li>\n<li><strong>name</strong> (str):\nElement name.</li>\n</ul>\n"}, {"fullname": "safeincave.Spring.__init__", "modulename": "safeincave", "qualname": "Spring.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">E</span>, </span><span class=\"param\"><span class=\"n\">nu</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;spring&#39;</span></span>)</span>"}, {"fullname": "safeincave.Spring.E", "modulename": "safeincave", "qualname": "Spring.E", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Spring.nu", "modulename": "safeincave", "qualname": "Spring.nu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Spring.name", "modulename": "safeincave", "qualname": "Spring.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Spring.n_elems", "modulename": "safeincave", "qualname": "Spring.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Spring.eps_e", "modulename": "safeincave", "qualname": "Spring.eps_e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Spring.initialize", "modulename": "safeincave", "qualname": "Spring.initialize", "kind": "function", "doc": "<p>Build stiffness operators and bulk modulus.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>C</code>, <code>C_inv</code>, <code>C_tilde</code>, <code>C_tilde_inv</code>, and <code>K</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Spring.compute_eps_e", "modulename": "safeincave", "qualname": "Spring.compute_eps_e", "kind": "function", "doc": "<p>Compute elastic strain from stress using <code>C_inv</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nCauchy stress tensor per element, shape (N, 3, 3).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.eps_e</code> (N, 3, 3).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Thermoelastic", "modulename": "safeincave", "qualname": "Thermoelastic", "kind": "class", "doc": "<p>Thermoelastic contribution producing thermal strain :math:<code>\\varepsilon_{th}\n= \\alpha\\,\\Delta T\\,I</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha</strong> (torch.Tensor):\nLinear coefficient of thermal expansion per element, shape (N,).</li>\n<li><strong>name</strong> (str, optional):\nIdentifier for the element, by default \"thermoelastic\".</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>alpha</strong> (torch.Tensor):\nThermal expansion coefficients, shape (N,).</li>\n<li><strong>n_elems</strong> (int):\nNumber of elements.</li>\n<li><strong>eps_th</strong> (torch.Tensor):\nThermal strain tensor per element, shape (N, 3, 3).</li>\n<li><strong>I</strong> (torch.Tensor):\nIdentity tensor (broadcasted to N), shape (N, 3, 3).</li>\n<li><strong>name</strong> (str):\nElement name.</li>\n</ul>\n"}, {"fullname": "safeincave.Thermoelastic.__init__", "modulename": "safeincave", "qualname": "Thermoelastic.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;thermoelastic&#39;</span></span>)</span>"}, {"fullname": "safeincave.Thermoelastic.alpha", "modulename": "safeincave", "qualname": "Thermoelastic.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Thermoelastic.name", "modulename": "safeincave", "qualname": "Thermoelastic.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Thermoelastic.n_elems", "modulename": "safeincave", "qualname": "Thermoelastic.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Thermoelastic.eps_th", "modulename": "safeincave", "qualname": "Thermoelastic.eps_th", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Thermoelastic.I", "modulename": "safeincave", "qualname": "Thermoelastic.I", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Thermoelastic.compute_eps_th", "modulename": "safeincave", "qualname": "Thermoelastic.compute_eps_th", "kind": "function", "doc": "<p>Compute thermal strain from a temperature increment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dT_DG_vec</strong> (torch.Tensor):\nTemperature increment per element (N,) or broadcastable to (N,).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.eps_th = alpha * dT * I</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dT_DG_vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Viscoelastic", "modulename": "safeincave", "qualname": "Viscoelastic", "kind": "class", "doc": "<p>Kelvin\u2013Voigt-type viscoelastic element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eta</strong> (torch.Tensor):\nViscosity parameter per element, shape (N,).</li>\n<li><strong>E</strong> (torch.Tensor):\nYoung's modulus per element, shape (N,).</li>\n<li><strong>nu</strong> (torch.Tensor):\nPoisson's ratio per element, shape (N,).</li>\n<li><strong>name</strong> (str, optional):\nElement name, by default \"kelvin_voigt\".</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>C1</strong> (torch.Tensor):\nElastic stiffness in Voigt form, shape (N, 6, 6).</li>\n<li><strong>eta, E, nu</strong> (torch.Tensor):\nMaterial parameters, shape (N,).</li>\n</ul>\n", "bases": "safeincave.MaterialProps.NonElasticElement"}, {"fullname": "safeincave.Viscoelastic.__init__", "modulename": "safeincave", "qualname": "Viscoelastic.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">eta</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">nu</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kelvin_voigt&#39;</span></span>)</span>"}, {"fullname": "safeincave.Viscoelastic.eta", "modulename": "safeincave", "qualname": "Viscoelastic.eta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Viscoelastic.E", "modulename": "safeincave", "qualname": "Viscoelastic.E", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Viscoelastic.nu", "modulename": "safeincave", "qualname": "Viscoelastic.nu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Viscoelastic.name", "modulename": "safeincave", "qualname": "Viscoelastic.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Viscoelastic.C1", "modulename": "safeincave", "qualname": "Viscoelastic.C1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Viscoelastic.compute_eps_ne_rate", "modulename": "safeincave", "qualname": "Viscoelastic.compute_eps_ne_rate", "kind": "function", "doc": "<p>Compute viscoelastic strain rate (Kelvin\u2013Voigt form).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress_vec</strong> (torch.Tensor):\nStress tensor per element, shape (N, 3, 3).</li>\n<li><strong>phi1</strong> (float):\nTime integration factor (dt*theta).</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element (unused here).</li>\n<li><strong>return_eps_ne</strong> (bool, default=False):\nIf True, return the rate; else store it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None or torch.Tensor</strong>: (N, 3, 3) if <code>return_eps_ne=True</code>, else <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress_vec</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">phi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">return_eps_ne</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Viscoelastic.compute_E", "modulename": "safeincave", "qualname": "Viscoelastic.compute_E", "kind": "function", "doc": "<p>Closed-form 6\u00d76 operator for viscoelasticity:\n<code>E = (eta*I + phi2*C1)^{-1}</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3). (Unused here.)</li>\n<li><strong>dt</strong> (float):\nTime step.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter.</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element (unused).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: <code>E</code> with shape (N, 6, 6).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.DislocationCreep", "modulename": "safeincave", "qualname": "DislocationCreep", "kind": "class", "doc": "<p>Power-law dislocation creep: :math:<code>\\dot\\varepsilon_{ne}\n= A\\,\\exp(-Q/(RT))\\,\\q^{n-1}\\,\\mathbf{s}</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (torch.Tensor):\nPre-exponential factor per element, shape (N,).</li>\n<li><strong>Q</strong> (torch.Tensor):\nActivation energy per element, shape (N,).</li>\n<li><strong>n</strong> (torch.Tensor):\nStress exponent per element, shape (N,).</li>\n<li><strong>name</strong> (str, optional):\nElement name, by default \"creep\".</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>R</strong> (float):\nGas constant used (8.32).</li>\n<li><strong>A, Q, n</strong> (torch.Tensor):\nMaterial parameters, shape (N,).</li>\n</ul>\n", "bases": "safeincave.MaterialProps.NonElasticElement"}, {"fullname": "safeincave.DislocationCreep.__init__", "modulename": "safeincave", "qualname": "DislocationCreep.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;creep&#39;</span></span>)</span>"}, {"fullname": "safeincave.DislocationCreep.R", "modulename": "safeincave", "qualname": "DislocationCreep.R", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.DislocationCreep.Q", "modulename": "safeincave", "qualname": "DislocationCreep.Q", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.DislocationCreep.A", "modulename": "safeincave", "qualname": "DislocationCreep.A", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.DislocationCreep.n", "modulename": "safeincave", "qualname": "DislocationCreep.n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.DislocationCreep.name", "modulename": "safeincave", "qualname": "DislocationCreep.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.DislocationCreep.compute_eps_ne_rate", "modulename": "safeincave", "qualname": "DislocationCreep.compute_eps_ne_rate", "kind": "function", "doc": "<p>Compute creep strain rate from current stress.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress_vec</strong> (torch.Tensor):\nStress tensor per element, shape (N, 3, 3).</li>\n<li><strong>phi1</strong> (float):\nTime integration factor (unused here).</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element (N,) or broadcastable.</li>\n<li><strong>return_eps_ne</strong> (bool, default=False):\nIf True, return the rate; else store it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None or torch.Tensor</strong>: (N, 3, 3) if <code>return_eps_ne=True</code>, else <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress_vec</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">phi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">return_eps_ne</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PressureSolutionCreep", "modulename": "safeincave", "qualname": "PressureSolutionCreep", "kind": "class", "doc": "<p>Pressure solution creep: :math:<code>\\dot\\varepsilon_{ne}\n= A/(Td^3)\\,\\exp(-Q/(RT))\\,\\mathbf{s}</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (torch.Tensor):\nPre-exponential factor per element, shape (N,).</li>\n<li><strong>d</strong> (torch.Tensor):\nGrain size (diameter), shape (N,).</li>\n<li><strong>Q</strong> (torch.Tensor):\nActivation energy per element, shape (N,).</li>\n<li><strong>name</strong> (str, optional):\nElement name, by default \"creep\".</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>R</strong> (float):\nGas constant used (8.32).</li>\n<li><strong>A, Q, d</strong> (torch.Tensor):\nMaterial parameters, shape (N,).</li>\n</ul>\n", "bases": "safeincave.MaterialProps.NonElasticElement"}, {"fullname": "safeincave.PressureSolutionCreep.__init__", "modulename": "safeincave", "qualname": "PressureSolutionCreep.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;creep&#39;</span></span>)</span>"}, {"fullname": "safeincave.PressureSolutionCreep.R", "modulename": "safeincave", "qualname": "PressureSolutionCreep.R", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.PressureSolutionCreep.Q", "modulename": "safeincave", "qualname": "PressureSolutionCreep.Q", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.PressureSolutionCreep.A", "modulename": "safeincave", "qualname": "PressureSolutionCreep.A", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.PressureSolutionCreep.d", "modulename": "safeincave", "qualname": "PressureSolutionCreep.d", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.PressureSolutionCreep.name", "modulename": "safeincave", "qualname": "PressureSolutionCreep.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.PressureSolutionCreep.compute_eps_ne_rate", "modulename": "safeincave", "qualname": "PressureSolutionCreep.compute_eps_ne_rate", "kind": "function", "doc": "<p>Compute creep strain rate from current stress.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress_vec</strong> (torch.Tensor):\nStress tensor per element, shape (N, 3, 3).</li>\n<li><strong>phi1</strong> (float):\nTime integration factor (unused here).</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element (N,) or broadcastable.</li>\n<li><strong>return_eps_ne</strong> (bool, default=False):\nIf True, return the rate; else store it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None or torch.Tensor</strong>: (N, 3, 3) if <code>return_eps_ne=True</code>, else <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress_vec</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">phi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">return_eps_ne</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai", "modulename": "safeincave", "qualname": "ViscoplasticDesai", "kind": "class", "doc": "<p>Viscoplastic model of Desai-type with hardening (state) variable <code>alpha</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mu_1, N_1, a_1, eta, n, beta_1, beta, m, gamma, sigma_t, alpha_0</strong> (torch.Tensor):\nModel parameters per element, shape (N,).</li>\n<li><strong>name</strong> (str, optional):\nElement name, by default \"desai\".</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>alpha</strong> (torch.Tensor):\nCurrent hardening variable per element, shape (N,).</li>\n<li><strong>Fvp</strong> (torch.Tensor):\nCurrent value of the yield function per element, shape (N,).</li>\n<li><strong>qsi, qsi_old</strong> (torch.Tensor):\nAccumulated viscoplastic strain measure and its previous value, shape (N,).</li>\n<li><strong>P</strong> (torch.Tensor):\nSensitivity of the residue to stress, shape (N, 3, 3).</li>\n<li><strong>r, h</strong> (torch.Tensor):\nResidue and its derivative w.r.t. <code>alpha</code>, shapes (N,) and (N,).</li>\n</ul>\n", "bases": "safeincave.MaterialProps.NonElasticElement"}, {"fullname": "safeincave.ViscoplasticDesai.__init__", "modulename": "safeincave", "qualname": "ViscoplasticDesai.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mu_1</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">N_1</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">a_1</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">eta</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">beta_1</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_t</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_0</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;desai&#39;</span></span>)</span>"}, {"fullname": "safeincave.ViscoplasticDesai.name", "modulename": "safeincave", "qualname": "ViscoplasticDesai.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.mu_1", "modulename": "safeincave", "qualname": "ViscoplasticDesai.mu_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.N_1", "modulename": "safeincave", "qualname": "ViscoplasticDesai.N_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.a_1", "modulename": "safeincave", "qualname": "ViscoplasticDesai.a_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.eta", "modulename": "safeincave", "qualname": "ViscoplasticDesai.eta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.n", "modulename": "safeincave", "qualname": "ViscoplasticDesai.n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.beta_1", "modulename": "safeincave", "qualname": "ViscoplasticDesai.beta_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.beta", "modulename": "safeincave", "qualname": "ViscoplasticDesai.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.m", "modulename": "safeincave", "qualname": "ViscoplasticDesai.m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.gamma", "modulename": "safeincave", "qualname": "ViscoplasticDesai.gamma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.sigma_t", "modulename": "safeincave", "qualname": "ViscoplasticDesai.sigma_t", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.alpha_0", "modulename": "safeincave", "qualname": "ViscoplasticDesai.alpha_0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.F_0", "modulename": "safeincave", "qualname": "ViscoplasticDesai.F_0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.n_elems", "modulename": "safeincave", "qualname": "ViscoplasticDesai.n_elems", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.alpha", "modulename": "safeincave", "qualname": "ViscoplasticDesai.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.Fvp", "modulename": "safeincave", "qualname": "ViscoplasticDesai.Fvp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.qsi", "modulename": "safeincave", "qualname": "ViscoplasticDesai.qsi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.qsi_old", "modulename": "safeincave", "qualname": "ViscoplasticDesai.qsi_old", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.ViscoplasticDesai.compute_residue", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_residue", "kind": "function", "doc": "<p>Residue of the implicit hardening equation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eps_rate</strong> (torch.Tensor):\nCurrent inelastic strain rate, shape (N, 3, 3).</li>\n<li><strong>alpha</strong> (torch.Tensor):\nHardening variable, shape (N,).</li>\n<li><strong>dt</strong> (float):\nTime step.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Residue per element, shape (N,).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Updates <code>self.qsi</code> internally based on <code>eps_rate</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">eps_rate</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.update_internal_variables", "modulename": "safeincave", "qualname": "ViscoplasticDesai.update_internal_variables", "kind": "function", "doc": "<p>Commit accumulated measure <code>qsi</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.increment_internal_variables", "modulename": "safeincave", "qualname": "ViscoplasticDesai.increment_internal_variables", "kind": "function", "doc": "<p>Increment hardening variable <code>alpha</code> using linearization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nEnd-of-step stress, shape (N, 3, 3).</li>\n<li><strong>stress_k</strong> (torch.Tensor):\nIntermediate stress, shape (N, 3, 3).</li>\n<li><strong>dt</strong> (float):\nTime step.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Updates <code>self.alpha</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">stress_k</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.compute_stress_invariants", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_stress_invariants", "kind": "function", "doc": "<p>Compute invariants (I1, I2, I3, J2, J3) and auxiliary quantities.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s_xx, s_yy, s_zz, s_xy, s_xz, s_yz</strong> (torch.Tensor):\nNormal and shear components (MPa-scaled as provided), each shape (N,).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>I1, I2, I3, J2, J3, Sr, I1_star, ind_J2_leq_0</strong> (tuple of torch.Tensor):\nInvariants and helper arrays; <code>ind_J2_leq_0</code> are indices where <code>J2 &lt;= 0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">s_xx</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">s_yy</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">s_zz</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">s_xy</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">s_xz</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">s_yz</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.extract_stress_components", "modulename": "safeincave", "qualname": "ViscoplasticDesai.extract_stress_components", "kind": "function", "doc": "<p>Extract and scale stress components from a 3\u00d73 tensor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[torch.Tensor, ...]</strong>: <code>(s_xx, s_yy, s_zz, s_xy, s_xz, s_yz)</code>, each shape (N,).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.compute_Fvp", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_Fvp", "kind": "function", "doc": "<p>Compute the Desai viscoplastic yield function value <code>Fvp</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha</strong> (torch.Tensor):\nHardening variable per element, shape (N,).</li>\n<li><strong>I1</strong> (torch.Tensor):\nFirst invariant, shape (N,).</li>\n<li><strong>J2</strong> (torch.Tensor):\nSecond deviatoric invariant, shape (N,).</li>\n<li><strong>Sr</strong> (torch.Tensor):\nLode-related parameter, shape (N,).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: <code>Fvp</code> per element, shape (N,).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">alpha</span>, </span><span class=\"param\"><span class=\"n\">I1</span>, </span><span class=\"param\"><span class=\"n\">J2</span>, </span><span class=\"param\"><span class=\"n\">Sr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.compute_initial_hardening", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_initial_hardening", "kind": "function", "doc": "<p>Initialize <code>alpha</code> from a target <code>Fvp_0</code> and the current stress state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3).</li>\n<li><strong>Fvp_0</strong> (float, default=0.0):\nTarget initial value for <code>Fvp</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Sets <code>self.alpha_0</code>, <code>self.alpha</code>, and <code>self.Fvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">Fvp_0</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.compute_eps_ne_rate", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_eps_ne_rate", "kind": "function", "doc": "<p>Compute viscoplastic strain rate and optionally return it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3).</li>\n<li><strong>phi1</strong> (float):\nTime integration factor (dt*theta).</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element (unused).</li>\n<li><strong>alpha</strong> (torch.Tensor or None, optional):\nHardening variable override; if <code>None</code>, use <code>self.alpha</code>.</li>\n<li><strong>return_eps_ne</strong> (bool, default=False):\nIf True, return rate; else store it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None or torch.Tensor</strong>: (N, 3, 3) if <code>return_eps_ne=True</code>, else <code>None</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Also updates <code>self.Fvp</code> when <code>return_eps_ne=False</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">phi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_eps_ne</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.compute_B_and_H_over_h", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_B_and_H_over_h", "kind": "function", "doc": "<p>Compute <code>B</code> and <code>H/h</code> via perturbations of <code>alpha</code> and stress.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stress</strong> (torch.Tensor):\nStress per element, shape (N, 3, 3).</li>\n<li><strong>dt</strong> (float):\nTime step.</li>\n<li><strong>theta</strong> (float):\nTime integration parameter.</li>\n<li><strong>Temp</strong> (torch.Tensor):\nTemperature per element (unused).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B</strong> (torch.Tensor):\nDriving term, shape (N, 3, 3).</li>\n<li><strong>H_over_h</strong> (torch.Tensor):\nLinearization ratio, shape (N, 6, 6).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses finite differences to approximate sensitivities.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stress</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Temp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ViscoplasticDesai.compute_H", "modulename": "safeincave", "qualname": "ViscoplasticDesai.compute_H", "kind": "function", "doc": "<p>Build the 6\u00d76 matrix <code>H</code> from tensors <code>Q</code> and <code>P</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Q</strong> (torch.Tensor):\nSensitivity of rate to <code>alpha</code>, shape (N, 3, 3).</li>\n<li><strong>P</strong> (torch.Tensor):\nSensitivity of residue to stress, shape (N, 3, 3).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: <code>H</code> with shape (N, 6, 6) in tensorial Voigt ordering.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.SaveFields", "modulename": "safeincave", "qualname": "SaveFields", "kind": "class", "doc": "<p>Manage writing FEniCSx fields to XDMF over time.</p>\n\n<p>This helper collects references to fields stored on an equation object\n(either <code>LinearMomentum</code> or <code>HeatDiffusion</code>), opens one\nXDMF writer per field, and writes time-stamped data during a simulation.\nIt can also copy the original Gmsh mesh file into the output directory\nfor provenance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eq</strong> (EqType):\nEquation/model object. Must expose:\n<ul>\n<li><code>eq.grid.mesh</code> (a DOLFINx mesh with communicator),</li>\n<li><code>eq.grid.grid_folder</code> (path where the original <code>.msh</code> lives),</li>\n<li><code>eq.grid.geometry_name</code> (base filename of the <code>.msh</code>),</li>\n<li>attributes for each field you register via <code>add_output_field()</code>.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>eq</strong> (EqType):\nStored equation/model handle.</li>\n<li><strong>fields_data</strong> (list of dict):\nRegistered field descriptors, each with keys\n<code>{\"field_name\": str, \"label_name\": str}</code>.</li>\n<li><strong>output_fields</strong> (list of dolfinx.io.XDMFFile):\nOpen writers, in the same order as <code>fields_data</code>.</li>\n<li><strong>output_folder</strong> (str):\nBase directory for outputs (set via <code>set_output_folder()</code>).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Voigt/tensor conventions, function ranks, and meshtags are not managed\nhere; this class only writes whatever <code>dolfinx</code> <code>Function</code> you\nprovide in <code>eq</code>.\ncreated by <code>initialize()</code>. Ensure they exist beforehand.</li>\n</ul>\n"}, {"fullname": "safeincave.SaveFields.__init__", "modulename": "safeincave", "qualname": "SaveFields.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">eq</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "safeincave.SaveFields.eq", "modulename": "safeincave", "qualname": "SaveFields.eq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.SaveFields.fields_data", "modulename": "safeincave", "qualname": "SaveFields.fields_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.SaveFields.output_fields", "modulename": "safeincave", "qualname": "SaveFields.output_fields", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.SaveFields.set_output_folder", "modulename": "safeincave", "qualname": "SaveFields.set_output_folder", "kind": "function", "doc": "<p>Set the base directory for all outputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_folder</strong> (str):\nPath to the directory where subfolders and XDMF files will be placed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.SaveFields.add_output_field", "modulename": "safeincave", "qualname": "SaveFields.add_output_field", "kind": "function", "doc": "<p>Register a field to be written, with a display label.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>field_name</strong> (str):\nAttribute name on <code>self.eq</code> that refers to a\n<code>dolfinx.fem.Function</code> (e.g., <code>\"u\"</code>, <code>\"T\"</code>, <code>\"sigma\"</code>).</li>\n<li><strong>label_name</strong> (str):\nHuman-readable name assigned to <code>field.name</code> when writing\n(appears in XDMF/ParaView).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>You may call this multiple times before <code>initialize()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">label_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.SaveFields.initialize", "modulename": "safeincave", "qualname": "SaveFields.initialize", "kind": "function", "doc": "<p>Open one XDMF writer per registered field and write the mesh.</p>\n\n<p>For each entry in <code>fields_data</code>, opens an XDMF at\n<code>{output_folder}/{field_name}/{field_name}.xdmf</code> and writes\n<code>self.eq.grid.mesh</code> once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>OSError</strong>: If the per-field output directory does not exist.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Files are opened in <code>\"w\"</code> mode (overwrite).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.SaveFields.save_fields", "modulename": "safeincave", "qualname": "SaveFields.save_fields", "kind": "function", "doc": "<p>Write all registered fields at simulation time <code>t</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nTime value to associate with this write.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>For each descriptor in <code>fields_data</code>:</p>\n\n<ol>\n<li>Fetches the field via <code>getattr(self.eq, field_name)</code>.</li>\n<li>Sets <code>field.name = label_name</code>.</li>\n<li>Calls <code>XDMFFile.write_function(field, t)</code> on the corresponding writer.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.SaveFields.save_mesh", "modulename": "safeincave", "qualname": "SaveFields.save_mesh", "kind": "function", "doc": "<p>Copy the original Gmsh mesh file into <code>{output_folder}/mesh/</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<ul>\n<li>Creates <code>{output_folder}/mesh</code> if it does not exist.</li>\n<li>Copies\n<code>{eq.grid.grid_folder}/{eq.grid.geometry_name}.msh</code>\nto that directory.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: If the source <code>.msh</code> file does not exist.</li>\n<li><strong>OSError</strong>: If the copy fails for other I/O reasons.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_TM", "modulename": "safeincave", "qualname": "Simulator_TM", "kind": "class", "doc": "<p>Run the coupled thermo\u2013mechanical simulation.</p>\n\n<h6 id=\"workflow\">Workflow</h6>\n\n<ol>\n<li>Initialize outputs.</li>\n<li>Initialize momentum temperature from the heat solution and update BCs.</li>\n<li>Optionally solve a purely elastic response.</li>\n<li>Initialize non-elastic rates.</li>\n<li><p>For each time step:</p>\n\n<ul>\n<li>Advance time and update boundary conditions for both equations.</li>\n<li>Solve the heat equation for <code>(t, dt)</code> and set temperatures in momentum.</li>\n<li>Iterate the momentum step (assemble/solve, update internal variables and rates).</li>\n<li>Save requested fields.</li>\n</ul></li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "bases": "safeincave.Simulators.Simulator"}, {"fullname": "safeincave.Simulator_TM.__init__", "modulename": "safeincave", "qualname": "Simulator_TM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">eq_mom</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MomentumEquation</span><span class=\"o\">.</span><span class=\"n\">LinearMomentum</span>,</span><span class=\"param\">\t<span class=\"n\">eq_heat</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">HeatEquation</span><span class=\"o\">.</span><span class=\"n\">HeatDiffusion</span>,</span><span class=\"param\">\t<span class=\"n\">t_control</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">TimeHandler</span><span class=\"o\">.</span><span class=\"n\">TimeControllerBase</span>,</span><span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">OutputHandler</span><span class=\"o\">.</span><span class=\"n\">SaveFields</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">compute_elastic_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "safeincave.Simulator_TM.eq_mom", "modulename": "safeincave", "qualname": "Simulator_TM.eq_mom", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_TM.eq_heat", "modulename": "safeincave", "qualname": "Simulator_TM.eq_heat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_TM.t_control", "modulename": "safeincave", "qualname": "Simulator_TM.t_control", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_TM.outputs", "modulename": "safeincave", "qualname": "Simulator_TM.outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_TM.compute_elastic_response", "modulename": "safeincave", "qualname": "Simulator_TM.compute_elastic_response", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_TM.screen", "modulename": "safeincave", "qualname": "Simulator_TM.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_TM.run", "modulename": "safeincave", "qualname": "Simulator_TM.run", "kind": "function", "doc": "<p>Run the coupled thermo\u2013mechanical simulation.</p>\n\n<h6 id=\"workflow\">Workflow</h6>\n\n<ol>\n<li>Initialize outputs.</li>\n<li>Initialize momentum temperature history from the heat solution.</li>\n<li>Update BCs and optionally solve a purely elastic step.</li>\n<li>Initialize non-elastic rates.</li>\n<li><p>Time loop:</p>\n\n<ul>\n<li>Advance time, update BCs, solve heat step.</li>\n<li>Fixed-point (or single-pass) iterate the momentum step with the\ncurrent temperature, updating internal variables and rates.</li>\n<li>Save requested fields.</li>\n</ul></li>\n</ol>\n\n<h6 id=\"convergence\">Convergence</h6>\n\n<p>Uses a relative change in total strain between iterations as error.\nIf <code>theta == 1.0</code> (backward Euler) or there are no non-elastic\nelements, iteration terminates immediately.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Calls <code>SaveFields.initialize()</code> once and <code>save_fields(t)</code> at each\nsaved time, followed by <code>save_mesh()</code> after the loop.</li>\n<li>Printing of progress occurs on rank 0 only.</li>\n<li>The first <code>output.save_fields(0)</code> call targets the last <code>output</code>\nfrom the preceding loop variable; ensure all outputs are saved by\niterating over <code>self.outputs</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_T", "modulename": "safeincave", "qualname": "Simulator_T", "kind": "class", "doc": "<p>Thermal-only simulator (heat diffusion).</p>\n\n<p>Advances the heat equation with fully-implicit time loop and writes fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eq_heat</strong> (HeatDiffusion):\nConfigured heat equation (materials, BCs, solver set).</li>\n<li><strong>t_control</strong> (TimeControllerBase):\nTime controller providing <code>t</code>, <code>dt</code>, and loop control.</li>\n<li><strong>outputs</strong> (list of SaveFields):\nOutput writers to initialize and use at each saved time.</li>\n<li><strong>compute_elastic_response</strong> (bool, default=True):\nUnused placeholder kept for interface parity.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>eq_heat</strong> (HeatDiffusion):</p></li>\n<li><p><strong>t_control</strong> (TimeControllerBase):</p></li>\n<li><p><strong>outputs</strong> (list[SaveFields]):</p></li>\n</ul>\n", "bases": "safeincave.Simulators.Simulator"}, {"fullname": "safeincave.Simulator_T.__init__", "modulename": "safeincave", "qualname": "Simulator_T.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">eq_heat</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">HeatEquation</span><span class=\"o\">.</span><span class=\"n\">HeatDiffusion</span>,</span><span class=\"param\">\t<span class=\"n\">t_control</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">TimeHandler</span><span class=\"o\">.</span><span class=\"n\">TimeControllerBase</span>,</span><span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">OutputHandler</span><span class=\"o\">.</span><span class=\"n\">SaveFields</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">compute_elastic_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "safeincave.Simulator_T.eq_heat", "modulename": "safeincave", "qualname": "Simulator_T.eq_heat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_T.t_control", "modulename": "safeincave", "qualname": "Simulator_T.t_control", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_T.outputs", "modulename": "safeincave", "qualname": "Simulator_T.outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_T.screen", "modulename": "safeincave", "qualname": "Simulator_T.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_T.run", "modulename": "safeincave", "qualname": "Simulator_T.run", "kind": "function", "doc": "<p>Run the thermal simulation.</p>\n\n<h6 id=\"workflow\">Workflow</h6>\n\n<ol>\n<li>Initialize outputs.</li>\n<li>(Optionally) solve an initial step.</li>\n<li>Time loop: update BCs, solve heat equation for <code>(t, dt)</code>, and save.</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Printing of progress occurs on rank 0 only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_M", "modulename": "safeincave", "qualname": "Simulator_M", "kind": "class", "doc": "<p>Mechanical-only simulator (linear momentum).</p>\n\n<p>Solves the momentum equation with possible non-elastic behavior using a\n\u03b8-method loop and fixed-point iterations per step. No thermal coupling.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eq_mom</strong> (LinearMomentum):\nConfigured momentum equation (materials, BCs, solver set).</li>\n<li><strong>t_control</strong> (TimeControllerBase):\nTime controller providing <code>t</code>, <code>dt</code>, and loop control.</li>\n<li><strong>outputs</strong> (list of SaveFields):\nOutput writers to initialize and use at each saved time.</li>\n<li><strong>compute_elastic_response</strong> (bool, default=True):\nIf True, starts with a purely elastic solve to initialize fields.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>eq_mom</strong> (LinearMomentum):</p></li>\n<li><p><strong>t_control</strong> (TimeControllerBase):</p></li>\n<li><p><strong>outputs</strong> (list[SaveFields]):</p></li>\n<li><p><strong>compute_elastic_response</strong> (bool):</p></li>\n</ul>\n", "bases": "safeincave.Simulators.Simulator"}, {"fullname": "safeincave.Simulator_M.__init__", "modulename": "safeincave", "qualname": "Simulator_M.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">eq_mom</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MomentumEquation</span><span class=\"o\">.</span><span class=\"n\">LinearMomentum</span>,</span><span class=\"param\">\t<span class=\"n\">t_control</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">TimeHandler</span><span class=\"o\">.</span><span class=\"n\">TimeControllerBase</span>,</span><span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">OutputHandler</span><span class=\"o\">.</span><span class=\"n\">SaveFields</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">compute_elastic_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "safeincave.Simulator_M.eq_mom", "modulename": "safeincave", "qualname": "Simulator_M.eq_mom", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_M.t_control", "modulename": "safeincave", "qualname": "Simulator_M.t_control", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_M.outputs", "modulename": "safeincave", "qualname": "Simulator_M.outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_M.compute_elastic_response", "modulename": "safeincave", "qualname": "Simulator_M.compute_elastic_response", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_M.screen", "modulename": "safeincave", "qualname": "Simulator_M.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_M.run", "modulename": "safeincave", "qualname": "Simulator_M.run", "kind": "function", "doc": "<p>Run the mechanical simulation.</p>\n\n<h6 id=\"workflow\">Workflow</h6>\n\n<ol>\n<li>Initialize outputs and boundary conditions.</li>\n<li>Optionally solve a purely elastic step.</li>\n<li>Initialize non-elastic rates.</li>\n<li>For each time step: assemble/solve, update internal variables and\nrates, compute relevant quantities, and save fields.</li>\n</ol>\n\n<h6 id=\"convergence\">Convergence</h6>\n\n<p>Uses a relative change in total strain between iterations as error.\nIf <code>theta == 1.0</code> or no non-elastic elements exist, iteration ends\nimmediately.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Printing occurs on rank 0 only.</li>\n<li>The first <code>output.save_fields(0)</code> call uses the last <code>output</code>\nfrom the preceding loop variable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI", "modulename": "safeincave", "qualname": "Simulator_GUI", "kind": "class", "doc": "<p>High-level driver to set up and run mechanical simulations from a\ndictionary-based input specification.</p>\n\n<p>This GUI-friendly wrapper builds the grid, initializes the linear\nmomentum equation, sets up PETSc solvers, configures material models\n(elastic and nonelastic), applies gravity and boundary conditions,\nand runs equilibrium and operation stages.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>input_file</strong> (dict):\nNested configuration dictionary. The following keys are expected:</p>\n\n<ul>\n<li><code>output.path</code> : str\nRoot folder where results will be written.</li>\n<li><code>grid.path</code> : str\nDirectory containing the mesh.</li>\n<li><code>grid.name</code> : str\nMesh base name (without extension) understood by <code>GridHandlerGMSH</code>.</li>\n<li><code>time_settings.theta</code> : float\nGeneralized-\u03b1/\u03b8 method parameter for time integration in momentum.</li>\n<li><code>time_settings.time_list</code> : array_like of float\nMonotone time stamps (seconds) for the operation stage.</li>\n<li><code>body_force.direction</code> : int\nIndex of gravity direction (0, 1, or 2).</li>\n<li><code>body_force.gravity</code> : float\nGravity magnitude (consistent units with the model).</li>\n<li><code>body_force.density</code> : Any\nIdentifier resolvable by <code>grid.get_parameter</code> to element-wise density.</li>\n<li><code>constitutive_model.elastic</code> : dict\nMapping from element-set names to parameters:\n<code>{\"&lt;set&gt;\": {\"parameters\": {\"E\": &lt;Any&gt;, \"nu\": &lt;Any&gt;}}}</code>.</li>\n<li><code>constitutive_model.nonelastic</code> : dict\nMapping from element-set names to nonelastic models. Each entry must\ndefine <code>\"type\"</code> (<code>\"KelvinVoigt\"</code>, <code>\"DislocationCreep\"</code>,\nor <code>\"ViscoplasticDesai\"</code>), an <code>\"active\"</code> flag, optional\n<code>\"equilibrium\"</code> flag, and a <code>\"parameters\"</code> block whose keys\ndepend on the chosen model.</li>\n<li><code>solver_settings.type</code> : {\"LU\", \"KrylovSolver\"}\nSolver family. <code>\"LU\"</code> uses a preonly KSP with LU PC.</li>\n<li><code>solver_settings.method</code> : str, optional\nPETSc KSP type (e.g., <code>\"cg\"</code>, <code>\"gmres\"</code>, <code>\"bicg\"</code>) if\n<code>type=\"KrylovSolver\"</code>.</li>\n<li><code>solver_settings.preconditioner</code> : str, optional\nPETSc PC type (e.g., <code>\"asm\"</code>, <code>\"hypre\"</code>, <code>\"ilu\"</code>) if\n<code>type=\"KrylovSolver\"</code>.</li>\n<li><code>solver_settings.relative_tolerance</code> : float, optional\nKSP relative tolerance if <code>type=\"KrylovSolver\"</code>.</li>\n<li><code>simulation_settings.equilibrium.active</code> : bool\nWhether to run an initial equilibrium stage.</li>\n<li><code>simulation_settings.equilibrium.dt_max</code> : float\nTime step for the equilibrium pseudo-time march.</li>\n<li><code>simulation_settings.equilibrium.ite_max</code> : int\nNumber of pseudo-time iterations for equilibrium.</li>\n<li><code>simulation_settings.operation.dt_max</code> : float\nMaximum time step for the operation stage.</li>\n<li><code>simulation_settings.operation.hardening</code> : bool, optional\nIf <code>True</code> and using Desai, initialize hardening from current stress.</li>\n<li><code>boundary_conditions</code> : dict\nMapping from boundary names to BC definitions:\n<ul>\n<li>Neumann: <code>{\"type\": \"neumann\", \"direction\": int, \"density\": float,\n\"reference_position\": array_like (3,), \"values\": array_like,\n\"component\": (ignored), ...}</code></li>\n<li>Dirichlet: <code>{\"type\": \"dirichlet\", \"component\": int,\n\"values\": array_like, ...}</code></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>input_file</strong> (dict):\nOriginal configuration.</li>\n<li><strong>output_folder</strong> (str):\nOutput directory (<code>output.path</code>).</li>\n<li><strong>grid</strong> (GridHandlerGMSH):\nMesh/grid handler.</li>\n<li><strong>mom_eq</strong> (LinearMomentum):\nLinear momentum equation object.</li>\n<li><strong>mat</strong> (Material):\nMaterial container attached to <code>mom_eq</code>.</li>\n<li><strong>g</strong> (float):\nGravity magnitude (signed) used to assemble body forces.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>This class <em>mutates</em> the filesystem by writing results inside\n<code>output_folder</code> via the registered output handlers.</li>\n<li>All parameters referenced with <code>grid.get_parameter</code> can be scalars,\narrays, or field identifiers understood by the grid handler.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>GridHandlerGMSH</code><br />\n<code>LinearMomentum</code><br />\n<code>Material</code><br />\n<code>PETSc.KSP</code>  </p>\n", "bases": "safeincave.Simulators.Simulator"}, {"fullname": "safeincave.Simulator_GUI.__init__", "modulename": "safeincave", "qualname": "Simulator_GUI.__init__", "kind": "function", "doc": "<p>Construct the simulator and perform basic initialization steps.</p>\n\n<p>The initializer stores the input dictionary, sets the output folder,\nbuilds the grid, initializes the equation, configures the solver,\nsets material properties, and applies gravity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong> (dict):\nConfiguration dictionary. See class docstring for the expected schema.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If any required key is missing from <code>input_file</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "safeincave.Simulator_GUI.input_file", "modulename": "safeincave", "qualname": "Simulator_GUI.input_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_GUI.output_folder", "modulename": "safeincave", "qualname": "Simulator_GUI.output_folder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.Simulator_GUI.build_grid", "modulename": "safeincave", "qualname": "Simulator_GUI.build_grid", "kind": "function", "doc": "<p>Create and attach the grid handler from the input configuration.</p>\n\n<p>Uses <code>grid.path</code> and <code>grid.name</code> to instantiate a <code>GridHandlerGMSH</code>\nobject and assigns it to <code>self.grid</code>.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If <code>grid.path</code> or <code>grid.name</code> is missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.initialize_equation", "modulename": "safeincave", "qualname": "Simulator_GUI.initialize_equation", "kind": "function", "doc": "<p>Initialize the linear momentum equation object.</p>\n\n<p>Reads the generalized-\u03b8 parameter from <code>time_settings.theta</code> and\ncreates <code>self.mom_eq = LinearMomentum(self.grid, theta=theta)</code>.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If <code>time_settings.theta</code> is missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.set_gravity", "modulename": "safeincave", "qualname": "Simulator_GUI.set_gravity", "kind": "function", "doc": "<p>Define and assemble body force due to gravity.</p>\n\n<p>Constructs a gravity vector aligned with the axis specified by\n<code>body_force.direction</code> and magnitude <code>body_force.gravity</code>.\nThe vector is passed to <code>self.mom_eq.build_body_force</code>.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If <code>body_force.direction</code> or <code>body_force.gravity</code> is missing.</li>\n<li><strong>ValueError</strong>: If the gravity direction is not 0, 1, or 2.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.initialize_material", "modulename": "safeincave", "qualname": "Simulator_GUI.initialize_material", "kind": "function", "doc": "<p>Build and attach the elastic material model(s).</p>\n\n<ul>\n<li>Creates a <code>Material</code> container sized to the number of elements.</li>\n<li>Sets element-wise density from <code>body_force.density</code> via\n<code>grid.get_parameter</code>.</li>\n<li>For each entry in <code>constitutive_model.elastic</code>, queries <code>E</code> and\n<code>nu</code>, creates a <code>Spring</code> element, and registers it into\n<code>self.mat</code>. Finally, the material is attached to <code>self.mom_eq</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If required keys under <code>constitutive_model.elastic</code> or\n<code>body_force.density</code> are missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.build_solver", "modulename": "safeincave", "qualname": "Simulator_GUI.build_solver", "kind": "function", "doc": "<p>Configure and attach the PETSc linear solver.</p>\n\n<h6 id=\"behavior\">Behavior</h6>\n\n<ul>\n<li>If <code>solver_settings.type == \"LU\"</code>:\nUses a preonly KSP with LU preconditioner.</li>\n<li>If <code>solver_settings.type == \"KrylovSolver\"</code>:\nReads <code>method</code>, <code>preconditioner</code>, and <code>relative_tolerance</code>\nand sets them on the KSP.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The maximum number of iterations for Krylov solvers is set to 100.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If required <code>solver_settings</code> keys are missing.</li>\n<li><strong>ValueError</strong>: If an unsupported solver type is requested.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.run_equilibrium", "modulename": "safeincave", "qualname": "Simulator_GUI.run_equilibrium", "kind": "function", "doc": "<p>Run the equilibrium (pseudo-time) stage, if enabled.</p>\n\n<p>This stage optionally activates nonelastic models flagged with\n<code>equilibrium: True</code> and marches a pseudo-time controller until\n<code>ite_max</code> steps, applying time-constant boundary conditions.\nResults are written under <code>&lt;output_folder&gt;/equilibrium</code>.</p>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<ul>\n<li>Modifies <code>self.mom_eq.mat</code> by adding nonelastic elements\nas specified in the input.</li>\n<li>Writes displacement and stress fields via <code>SaveFields</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If an unsupported nonelastic element type or BC type is found.</li>\n<li><strong>KeyError</strong>: If required keys under <code>simulation_settings.equilibrium</code> or\n<code>boundary_conditions</code> are missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.element_exist", "modulename": "safeincave", "qualname": "Simulator_GUI.element_exist", "kind": "function", "doc": "<p>Check whether a nonelastic element with a given name exists.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>elem_name</strong> (str):\nElement set/name to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: <code>True</code> if an element with <code>elem_name</code> is present in\n<code>self.mom_eq.mat.elems_ne</code>, <code>False</code> otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elem_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.run_operation", "modulename": "safeincave", "qualname": "Simulator_GUI.run_operation", "kind": "function", "doc": "<p>Run the operation (transient) stage.</p>\n\n<p>Activates any nonelastic models flagged <code>active: True</code> (adding only if\nnot already present), configures the time controller using\n<code>time_settings.time_list</code> and <code>simulation_settings.operation.dt_max</code>,\napplies time-varying boundary conditions, registers outputs, and runs\nthe simulator.</p>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<ul>\n<li>May add nonelastic elements to the material model.</li>\n<li>Writes displacement, mean stress, and von Mises stress fields under\n<code>&lt;output_folder&gt;/operation</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If an unsupported nonelastic element type or BC type is found.</li>\n<li><strong>KeyError</strong>: If required time, BC, or simulation settings are missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Simulator_GUI.run", "modulename": "safeincave", "qualname": "Simulator_GUI.run", "kind": "function", "doc": "<p>Execute the full simulation workflow.</p>\n\n<p>If <code>simulation_settings.equilibrium.active</code> is <code>True</code>, runs the\nequilibrium stage first and then the operation stage; otherwise,\nruns only the operation stage.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.ScreenPrinter", "modulename": "safeincave", "qualname": "ScreenPrinter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safeincave.TimeControllerBase", "modulename": "safeincave", "qualname": "TimeControllerBase", "kind": "class", "doc": "<p>Base class for time-stepping controllers.</p>\n\n<p>Converts user-provided time units (e.g., minutes, hours) into <strong>seconds</strong>\nfor internal bookkeeping, stores the current time, and provides a\nloop-termination predicate. Concrete subclasses implement how time\nadvances each step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>initial_time</strong> (float):\nStart time expressed in the unit given by <code>time_unit</code>.</li>\n<li><strong>final_time</strong> (float):\nEnd time expressed in the unit given by <code>time_unit</code>.</li>\n<li><strong>time_unit</strong> ({\"second\", \"minute\", \"hour\", \"day\", \"year\"}, default=\"second\"):\nUnit of the input times. Internally, times are stored in seconds.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>time_unit</strong> (str):\nThe time unit specified by the user.</li>\n<li><strong>time_conversion</strong> (float):\nMultiplicative factor to convert the chosen unit into seconds.</li>\n<li><strong>t_initial</strong> (float):\nInitial time in seconds.</li>\n<li><strong>t_final</strong> (float):\nFinal time in seconds.</li>\n<li><strong>t</strong> (float):\nCurrent time in seconds.</li>\n<li><strong>step_counter</strong> (int):\nNumber of completed steps (starts at 0).</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "safeincave.TimeControllerBase.time_unit", "modulename": "safeincave", "qualname": "TimeControllerBase.time_unit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerBase.t_final", "modulename": "safeincave", "qualname": "TimeControllerBase.t_final", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerBase.t_initial", "modulename": "safeincave", "qualname": "TimeControllerBase.t_initial", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerBase.t", "modulename": "safeincave", "qualname": "TimeControllerBase.t", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerBase.step_counter", "modulename": "safeincave", "qualname": "TimeControllerBase.step_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerBase.keep_looping", "modulename": "safeincave", "qualname": "TimeControllerBase.keep_looping", "kind": "function", "doc": "<p>Check whether the controller should continue advancing time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: <code>True</code> while the current time <code>t</code> is strictly less than <code>t_final</code>,\notherwise <code>False</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.TimeControllerBase.advance_time", "modulename": "safeincave", "qualname": "TimeControllerBase.advance_time", "kind": "function", "doc": "<p>Advance the internal time by one step.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Subclasses must implement the time-update rule (e.g., add a fixed <code>dt</code>\nor follow a varying schedule).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.TimeController", "modulename": "safeincave", "qualname": "TimeController", "kind": "class", "doc": "<p>Fixed-step time controller.</p>\n\n<p>Advances the current time by a constant step <code>dt</code> expressed in the chosen\nunit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>dt</strong> (float):</p></li>\n<li><p><strong>Time-step size expressed in the units given by <code>time_unit</code>.</strong></p></li>\n<li><p><strong>initial_time</strong> (float):</p></li>\n<li><p><strong>Start time expressed in the units given by <code>time_unit</code>.</strong></p></li>\n<li><p><strong>final_time</strong> (float):</p></li>\n<li><p><strong>Final time expressed in the units given by <code>time_unit</code>.</strong></p></li>\n<li><p><strong>time_unit</strong> ({\"second\", \"minute\", \"hour\", \"day\", \"year\"}, default=\"second\"):</p></li>\n<li><p><strong>Unit used to interpret <code>dt</code>, <code>initial_time</code>, and <code>final_time</code>.</strong></p></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>dt</strong> (float):</p></li>\n<li><p><strong>Fixed time-step size in <em>*seconds</strong>.</em>*</p></li>\n</ul>\n", "bases": "safeincave.TimeHandler.TimeControllerBase"}, {"fullname": "safeincave.TimeController.__init__", "modulename": "safeincave", "qualname": "TimeController.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">initial_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">final_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">time_unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;second&#39;</span></span>)</span>"}, {"fullname": "safeincave.TimeController.dt", "modulename": "safeincave", "qualname": "TimeController.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeController.advance_time", "modulename": "safeincave", "qualname": "TimeController.advance_time", "kind": "function", "doc": "<p>Increment the current time by the fixed step <code>dt</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.TimeControllerParabolic", "modulename": "safeincave", "qualname": "TimeControllerParabolic", "kind": "class", "doc": "<p>Nonuniform (parabolic) time controller.</p>\n\n<p>Builds a monotonically increasing list of <code>n_time_steps</code> time instants\nbetween <code>initial_time</code> and <code>final_time</code> by mapping an equally spaced grid\nthrough a parabolic function and rescaling it back to the original range.\nThe step size <code>dt</code> changes over time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_time_steps</strong> (int):\nNumber of time instants (length of the time list).</li>\n<li><strong>initial_time</strong> (float):\nStart time expressed in the units given by <code>time_unit</code>.</li>\n<li><strong>final_time</strong> (float):\nFinal time expressed in the units given by <code>time_unit</code>.</li>\n<li><strong>time_unit</strong> ({\"second\", \"minute\", \"hour\", \"day\", \"year\"}, default=\"second\"):\nUnit used to interpret <code>initial_time</code> and <code>final_time</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>n_time_steps</strong> (int):\nNumber of generated time instants.</li>\n<li><strong>time_list</strong> (numpy.ndarray):\nMonotone array of times (in <strong>seconds</strong>) of length <code>n_time_steps</code>.</li>\n<li><strong>dt</strong> (float):\nCurrent time step size (in <strong>seconds</strong>); initialized as\n<code>time_list[1] - time_list[0]</code>.</li>\n<li><strong>step_counter</strong> (int):\nIndex of the most recently advanced step (starts at 0).</li>\n</ul>\n", "bases": "safeincave.TimeHandler.TimeControllerBase"}, {"fullname": "safeincave.TimeControllerParabolic.__init__", "modulename": "safeincave", "qualname": "TimeControllerParabolic.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_time_steps</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">initial_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">final_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">time_unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;second&#39;</span></span>)</span>"}, {"fullname": "safeincave.TimeControllerParabolic.n_time_steps", "modulename": "safeincave", "qualname": "TimeControllerParabolic.n_time_steps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerParabolic.time_list", "modulename": "safeincave", "qualname": "TimeControllerParabolic.time_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerParabolic.dt", "modulename": "safeincave", "qualname": "TimeControllerParabolic.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerParabolic.step_counter", "modulename": "safeincave", "qualname": "TimeControllerParabolic.step_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.TimeControllerParabolic.fun_parabolic", "modulename": "safeincave", "qualname": "TimeControllerParabolic.fun_parabolic", "kind": "function", "doc": "<p>Parabolic mapping used to skew an equally spaced time grid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t_array</strong> (numpy.ndarray):\nInput array (typically an equally spaced grid).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: Elementwise square of <code>t_array</code> (i.e., <code>t_array**2</code>).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.TimeControllerParabolic.calculate_varying_times", "modulename": "safeincave", "qualname": "TimeControllerParabolic.calculate_varying_times", "kind": "function", "doc": "<p>Generate a nonuniform time grid via a monotone mapping and rescaling.</p>\n\n<h6 id=\"steps\">Steps</h6>\n\n<ol>\n<li>Build an equally spaced grid on <code>[t_initial, t_final]</code>.</li>\n<li>Apply <code>fun</code> to this grid to skew the spacing.</li>\n<li>Linearly rescale the mapped values back to the original range so that\nthe first and last times remain <code>t_initial</code> and <code>t_final</code>.</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fun</strong> (Callable[[numpy.ndarray], numpy.ndarray]):\nMonotone mapping to skew the spacing (e.g., <code>fun_parabolic()</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: Monotone array of times (in seconds) of length <code>n_time_steps</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.TimeControllerParabolic.advance_time", "modulename": "safeincave", "qualname": "TimeControllerParabolic.advance_time", "kind": "function", "doc": "<p>Advance to the next time in <code>time_list</code>.</p>\n\n<p>Increments <code>step_counter</code>, sets <code>t</code> to the corresponding\nentry of <code>time_list</code>, and updates <code>dt</code> as the difference\nbetween the current and previous times.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>No bounds checking is performed. Ensure\n<code>step_counter &lt; n_time_steps - 1</code> before advancing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatBC", "modulename": "safeincave.HeatBC", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.GeneralBC", "modulename": "safeincave.HeatBC", "qualname": "GeneralBC", "kind": "class", "doc": "<p>Base container for boundary-condition data (time-dependent).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nName/label of the boundary as defined in the mesh tags handled by\nthe equation's grid (e.g., <code>eq.grid.get_boundary_tags(boundary_name)</code>).</li>\n<li><strong>values</strong> (list of float):\nValues of the boundary condition at the times given by <code>time_values</code>.\nInterpreted piecewise-linearly via <code>numpy.interp()</code>.</li>\n<li><strong>time_values</strong> (list of float):\nMonotonically increasing times associated with <code>values</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nBoundary label used to query mesh tags.</li>\n<li><strong>values</strong> (list of float):\nTime-sampled boundary values.</li>\n<li><strong>time_values</strong> (list of float):\nSample times corresponding to <code>values</code>.</li>\n<li><strong>type</strong> (str or None):\nBoundary condition type identifier (set by subclasses).</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "safeincave.HeatBC.GeneralBC.__init__", "modulename": "safeincave.HeatBC", "qualname": "GeneralBC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boundary_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">time_values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "safeincave.HeatBC.GeneralBC.boundary_name", "modulename": "safeincave.HeatBC", "qualname": "GeneralBC.boundary_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.GeneralBC.values", "modulename": "safeincave.HeatBC", "qualname": "GeneralBC.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.GeneralBC.time_values", "modulename": "safeincave.HeatBC", "qualname": "GeneralBC.time_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.GeneralBC.type", "modulename": "safeincave.HeatBC", "qualname": "GeneralBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.DirichletBC", "modulename": "safeincave.HeatBC", "qualname": "DirichletBC", "kind": "class", "doc": "<p>Time-dependent Dirichlet boundary condition (essential BC).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nNamed boundary in the mesh tags.</li>\n<li><strong>values</strong> (list of float):\nPrescribed values over time.</li>\n<li><strong>time_values</strong> (list of float):\nTimes corresponding to <code>values</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>type</strong> (str):\nAlways <code>\"dirichlet\"</code>.</li>\n</ul>\n", "bases": "GeneralBC"}, {"fullname": "safeincave.HeatBC.DirichletBC.__init__", "modulename": "safeincave.HeatBC", "qualname": "DirichletBC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boundary_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">time_values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "safeincave.HeatBC.DirichletBC.type", "modulename": "safeincave.HeatBC", "qualname": "DirichletBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.NeumannBC", "modulename": "safeincave.HeatBC", "qualname": "NeumannBC", "kind": "class", "doc": "<p>Time-dependent Neumann boundary condition (natural BC / flux).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nNamed boundary in the mesh tags.</li>\n<li><strong>values</strong> (list of float):\nFlux/intensity values over time.</li>\n<li><strong>time_values</strong> (list of float):\nTimes corresponding to <code>values</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>type</strong> (str):\nAlways <code>\"neumann\"</code>.</li>\n</ul>\n", "bases": "GeneralBC"}, {"fullname": "safeincave.HeatBC.NeumannBC.__init__", "modulename": "safeincave.HeatBC", "qualname": "NeumannBC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boundary_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">time_values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "safeincave.HeatBC.NeumannBC.type", "modulename": "safeincave.HeatBC", "qualname": "NeumannBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.RobinBC", "modulename": "safeincave.HeatBC", "qualname": "RobinBC", "kind": "class", "doc": "<p>Time-dependent Robin (convective) boundary condition.</p>\n\n<p>The Robin condition typically has the form\n\\( h (T - T_\\infty) \\) on the boundary, where <code>h</code> is a heat\ntransfer coefficient and <code>T_\u221e</code> may be time-dependent.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nNamed boundary in the mesh tags.</li>\n<li><strong>values</strong> (list of float):\nAmbient values (e.g., <code>T_\u221e</code>) sampled over time.</li>\n<li><strong>h</strong> (float):\nRobin/convective coefficient.</li>\n<li><strong>time_values</strong> (list of float):\nTimes corresponding to <code>values</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>type</strong> (str):\nAlways <code>\"robin\"</code>.</li>\n<li><strong>h</strong> (float):\nRobin coefficient.</li>\n</ul>\n", "bases": "GeneralBC"}, {"fullname": "safeincave.HeatBC.RobinBC.__init__", "modulename": "safeincave.HeatBC", "qualname": "RobinBC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boundary_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">time_values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "safeincave.HeatBC.RobinBC.type", "modulename": "safeincave.HeatBC", "qualname": "RobinBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.RobinBC.h", "modulename": "safeincave.HeatBC", "qualname": "RobinBC.h", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.BcHandler", "modulename": "safeincave.HeatBC", "qualname": "BcHandler", "kind": "class", "doc": "<p>Boundary-condition handler for a heat-diffusion equation.</p>\n\n<p>This class stores user-defined boundary conditions, organizes them by\ntype (Dirichlet, Neumann, Robin), and converts them into DOLFINx/UFL\nobjects at a given time <code>t</code> for assembly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>equation</strong> (HeatDiffusion):\nEquation object providing:</p>\n\n<ul>\n<li><code>V</code>: function space of the primary field.</li>\n<li><code>grid</code>: mesh/grid handler with methods\n<code>get_boundary_tags()</code> and <code>get_boundary_tag()</code>.</li>\n<li>Variational symbols, e.g., <code>T_</code> (test function), <code>dT</code> (trial\nincrement), and the measure <code>ds</code>.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>eq</strong> (HeatDiffusion):\nStored equation reference.</li>\n<li><strong>dirichlet_boundaries</strong> (list[DirichletBC]):\nRegistered Dirichlet BCs.</li>\n<li><strong>neumann_boundaries</strong> (list[NeumannBC]):\nRegistered Neumann BCs.</li>\n<li><strong>robin_boundaries</strong> (list[RobinBC]):\nRegistered Robin BCs.</li>\n<li><strong>dirichlet_bcs</strong> (list[dolfinx.fem.DirichletBC]):\nDOLFINx Dirichlet BC objects at the current time (set by <code>update_dirichlet()</code>).</li>\n<li><strong>neumann_bcs</strong> (list[ufl.Form]):\nNeumann contributions to the linear form (set by <code>update_neumann()</code>).</li>\n<li><strong>robin_bcs_a</strong> (list[ufl.Form]):\nRobin contributions to the bilinear form (coefficient times trial/test; set by <code>update_robin()</code>).</li>\n<li><strong>robin_bcs_b</strong> (list[ufl.Form]):\nRobin contributions to the linear form (coefficient times ambient value; set by <code>update_robin()</code>).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Time dependence is handled via piecewise-linear interpolation using\n<code>numpy.interp()</code> between <code>values</code> and <code>time_values</code> stored in each\nboundary-condition object.</p>\n"}, {"fullname": "safeincave.HeatBC.BcHandler.__init__", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equation</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">HeatEquation</span><span class=\"o\">.</span><span class=\"n\">HeatDiffusion</span></span>)</span>"}, {"fullname": "safeincave.HeatBC.BcHandler.eq", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.eq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.BcHandler.dirichlet_boundaries", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.dirichlet_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.BcHandler.neumann_boundaries", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.neumann_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.BcHandler.robin_boundaries", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.robin_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.HeatBC.BcHandler.reset_boundary_conditions", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.reset_boundary_conditions", "kind": "function", "doc": "<p>Clear all registered boundary conditions of all types.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatBC.BcHandler.add_boundary_condition", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.add_boundary_condition", "kind": "function", "doc": "<p>Register a boundary condition by its type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bc</strong> (GeneralBC):\nOne of <code>DirichletBC</code>, <code>NeumannBC</code>, or <code>RobinBC</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the boundary condition type is not supported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bc</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">HeatBC</span><span class=\"o\">.</span><span class=\"n\">GeneralBC</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatBC.BcHandler.update_bcs", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.update_bcs", "kind": "function", "doc": "<p>Update all boundary-condition objects for a given time.</p>\n\n<p>This builds the runtime lists:\n<code>dirichlet_bcs</code>, <code>neumann_bcs</code>, <code>robin_bcs_a</code>, and <code>robin_bcs_b</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent simulation time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatBC.BcHandler.update_dirichlet", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.update_dirichlet", "kind": "function", "doc": "<p>Build Dirichlet BC objects at time <code>t</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent simulation time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Populates <code>dirichlet_bcs</code> with\n<code>dolfinx.fem.DirichletBC</code> objects constructed from:</p>\n\n<ul>\n<li>located dofs on the boundary,</li>\n<li>interpolated Dirichlet value at time <code>t</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatBC.BcHandler.update_neumann", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.update_neumann", "kind": "function", "doc": "<p>Build Neumann contributions to the linear form at time <code>t</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent simulation time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Populates <code>neumann_bcs</code> with UFL terms of the form\n<code>value * eq.T_ * ds(tag)</code> to be added to the right-hand side.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.HeatBC.BcHandler.update_robin", "modulename": "safeincave.HeatBC", "qualname": "BcHandler.update_robin", "kind": "function", "doc": "<p>Build Robin (convective) contributions to bilinear/linear forms.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent simulation time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Populates:</p>\n\n<ul>\n<li><code>robin_bcs_a</code> with terms <code>h * dT * T_ * ds(tag)</code>\n(bilinear form contribution),</li>\n<li><code>robin_bcs_b</code> with terms <code>h * T_inf * T_ * ds(tag)</code>\n(linear form contribution),\nwhere <code>T_inf</code> is interpolated from the Robin BC values at time <code>t</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.MomentumBC", "modulename": "safeincave.MomentumBC", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.GeneralBC", "modulename": "safeincave.MomentumBC", "qualname": "GeneralBC", "kind": "class", "doc": "<p>Base container for time-dependent boundary-condition data.</p>\n\n<p>Subclasses (e.g., <code>DirichletBC</code>, <code>NeumannBC</code>) set the\nconcrete fields and <code>type</code> identifier.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str or None):\nName/label of the boundary as defined by mesh tags.</li>\n<li><strong>type</strong> (str or None):\nBoundary condition type identifier (e.g., <code>\"dirichlet\"</code>, <code>\"neumann\"</code>).</li>\n<li><strong>values</strong> (list[float] or None):\nBoundary values sampled at the times in <code>time_values</code>.</li>\n<li><strong>time_values</strong> (list[float] or None):\nMonotonically increasing times associated with <code>values</code>.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "safeincave.MomentumBC.GeneralBC.boundary_name", "modulename": "safeincave.MomentumBC", "qualname": "GeneralBC.boundary_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.GeneralBC.type", "modulename": "safeincave.MomentumBC", "qualname": "GeneralBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.GeneralBC.values", "modulename": "safeincave.MomentumBC", "qualname": "GeneralBC.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.GeneralBC.time_values", "modulename": "safeincave.MomentumBC", "qualname": "GeneralBC.time_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.DirichletBC", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC", "kind": "class", "doc": "<p>Time-dependent Dirichlet (essential) boundary condition for one component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nNamed boundary in the mesh tags (handled by the grid object).</li>\n<li><strong>component</strong> (int):\nComponent index of the vector field to constrain (e.g., 0=x, 1=y, 2=z).</li>\n<li><strong>values</strong> (list[float]):\nPrescribed values over time (interpolated with <code>numpy.interp()</code>).</li>\n<li><strong>time_values</strong> (list[float]):\nTimes corresponding to <code>values</code> (must be monotone).</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>type</strong> (str):\nAlways <code>\"dirichlet\"</code>.</li>\n<li><strong>component</strong> (int):\nConstrained component index.</li>\n<li><strong>values, time_values</strong> (list[float]):\nStored time history for interpolation.</li>\n<li><strong>boundary_name</strong> (str):\nStored boundary label.</li>\n</ul>\n", "bases": "GeneralBC"}, {"fullname": "safeincave.MomentumBC.DirichletBC.__init__", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boundary_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">component</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">time_values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "safeincave.MomentumBC.DirichletBC.boundary_name", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC.boundary_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.DirichletBC.type", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.DirichletBC.values", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.DirichletBC.time_values", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC.time_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.DirichletBC.component", "modulename": "safeincave.MomentumBC", "qualname": "DirichletBC.component", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC", "kind": "class", "doc": "<p>Time-dependent Neumann (traction/pressure) boundary condition with hydrostatics.</p>\n\n<p>The applied boundary value is modeled as\n<code>p(t) + \u03c1 g (H - x[i])</code>, where <code>p(t)</code> is a time-dependent pressure,\n<code>\u03c1</code> is density, <code>g</code> is gravity (default negative for downward),\n<code>H</code> is a reference elevation, and <code>x[i]</code> is the spatial coordinate\nin the chosen direction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boundary_name</strong> (str):\nNamed boundary in the mesh tags.</li>\n<li><strong>direction</strong> (int):\nCoordinate index used for hydrostatic variation (0=x, 1=y, 2=z).</li>\n<li><strong>density</strong> (float):\nFluid/solid density <code>\u03c1</code>.</li>\n<li><strong>ref_pos</strong> (float):\nReference elevation <code>H</code>.</li>\n<li><strong>values</strong> (list[float]):\nTime samples for the base pressure <code>p(t)</code> (before sign).</li>\n<li><strong>time_values</strong> (list[float]):\nTimes corresponding to <code>values</code> (must be monotone).</li>\n<li><strong>g</strong> (float, default=-9.81):\nGravitational acceleration (sign included).</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>type</strong> (str):\nAlways <code>\"neumann\"</code>.</li>\n<li><strong>direction</strong> (int):\nAxis index for hydrostatic term.</li>\n<li><strong>density</strong> (float):\nStored density.</li>\n<li><strong>ref_pos</strong> (float):\nStored reference elevation.</li>\n<li><strong>gravity</strong> (float):\nStored gravitational acceleration.</li>\n<li><strong>boundary_name, values, time_values</strong> (as given):\nStored metadata and time history.</li>\n</ul>\n", "bases": "GeneralBC"}, {"fullname": "safeincave.MomentumBC.NeumannBC.__init__", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">boundary_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">density</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ref_pos</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">time_values</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">g</span><span class=\"o\">=-</span><span class=\"mf\">9.81</span></span>)</span>"}, {"fullname": "safeincave.MomentumBC.NeumannBC.boundary_name", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.boundary_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.type", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.values", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.time_values", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.time_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.direction", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.density", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.density", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.ref_pos", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.ref_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.NeumannBC.gravity", "modulename": "safeincave.MomentumBC", "qualname": "NeumannBC.gravity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.BcHandler", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler", "kind": "class", "doc": "<p>Boundary-condition handler for a linear momentum problem.</p>\n\n<p>Stores user-defined BC objects, organizes them by type, and converts them\ninto DOLFINx/UFL objects at a given time <code>t</code> for assembly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>equation</strong> (LinearMomentum):\nMomentum equation object providing:\n<ul>\n<li><code>grid</code> with mesh, boundary dimension, and tag queries,</li>\n<li><code>get_uV()</code> to access the vector function space (for Dirichlet DOFs),</li>\n<li><code>normal</code> (outward unit normal vector for boundary integrals),</li>\n<li><code>ds</code> boundary measure.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>eq</strong> (LinearMomentum):\nStored equation reference.</li>\n<li><strong>dirichlet_boundaries</strong> (list[DirichletBC]):\nRegistered Dirichlet BCs.</li>\n<li><strong>neumann_boundaries</strong> (list[NeumannBC]):\nRegistered Neumann BCs.</li>\n<li><strong>dirichlet_bcs</strong> (list[dolfinx.fem.DirichletBC] (set by <code>update_dirichlet()</code>)):\nDOLFINx Dirichlet BC objects for the current time.</li>\n<li><strong>neumann_bcs</strong> (list[ufl.Form] (set by <code>update_neumann()</code>)):\nUFL surface terms to add to the right-hand side.</li>\n<li><strong>x</strong> (ufl.core.expr.Expr):\nSpatial coordinate vector <code>x = SpatialCoordinate(mesh)</code> used for hydrostatics.</li>\n</ul>\n"}, {"fullname": "safeincave.MomentumBC.BcHandler.__init__", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equation</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MomentumEquation</span><span class=\"o\">.</span><span class=\"n\">LinearMomentum</span></span>)</span>"}, {"fullname": "safeincave.MomentumBC.BcHandler.eq", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.eq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.BcHandler.dirichlet_boundaries", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.dirichlet_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.BcHandler.neumann_boundaries", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.neumann_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.BcHandler.x", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safeincave.MomentumBC.BcHandler.reset_boundary_conditions", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.reset_boundary_conditions", "kind": "function", "doc": "<p>Clear all registered boundary conditions.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.MomentumBC.BcHandler.add_boundary_condition", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.add_boundary_condition", "kind": "function", "doc": "<p>Register a boundary condition instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bc</strong> (GeneralBC):\nOne of <code>DirichletBC</code> or <code>NeumannBC</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the boundary condition type is not supported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bc</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">MomentumBC</span><span class=\"o\">.</span><span class=\"n\">GeneralBC</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.MomentumBC.BcHandler.update_dirichlet", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.update_dirichlet", "kind": "function", "doc": "<p>Build Dirichlet BC objects at time <code>t</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent simulation time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Populates <code>dirichlet_bcs</code> with\n<code>dolfinx.fem.DirichletBC</code> constructed by:</p>\n\n<ul>\n<li>locating DOFs on each boundary for the target component, and</li>\n<li>interpolating the prescribed value via <code>numpy.interp()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.MomentumBC.BcHandler.update_neumann", "modulename": "safeincave.MomentumBC", "qualname": "BcHandler.update_neumann", "kind": "function", "doc": "<p>Build Neumann contributions (tractions/pressures) at time <code>t</code>.</p>\n\n<p>For each <code>NeumannBC</code>, the boundary term is constructed as\n<code>(p(t) + \u03c1 g (H - x[i])) * n * ds(tag)</code>, where <code>n</code> is the outward\nunit normal, and <code>ds(tag)</code> is the boundary measure for the target\nboundary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent simulation time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"side-effects\">Side Effects</h6>\n\n<p>Populates <code>neumann_bcs</code> with UFL surface integrals to be added\nto the right-hand side form.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools", "modulename": "safeincave.PostProcessingTools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safeincave.PostProcessingTools.build_smoother", "modulename": "safeincave.PostProcessingTools", "qualname": "build_smoother", "kind": "function", "doc": "<p>Build a node\u2013cell smoothing operator for tetrahedral meshes.</p>\n\n<p>Given node coordinates and tetrahedral connectivities, this constructs a\n(sparse) smoothing matrix that averages cell-centered quantities to nodes\nand back to cells via a volume-weighted scheme.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>points</strong> ((n_nodes, 3) ndarray of float):\nNode coordinates (x, y, z).</li>\n<li><strong>conn</strong> ((n_elems, 4) ndarray of int):\nTetrahedral connectivity (node indices per element).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>smoother</strong> ((n_elems, n_elems) scipy.sparse.csr_matrix):\nSparse smoothing operator mapping cell fields to smoothed cell fields.\n(Note: although the annotation says <code>np.ndarray</code>, the returned\nobject is a CSR sparse matrix.)</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The operator is assembled as <code>B * A</code> where:</p>\n\n<ul>\n<li><code>A</code> distributes cell values to nodes using volume weights of incident\ncells.</li>\n<li><code>B</code> averages nodal values back to cells with uniform weights over the\nelement's nodes.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>scipy.sparse.csr_matrix</code>  </p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.build_mapping", "modulename": "safeincave.PostProcessingTools", "qualname": "build_mapping", "kind": "function", "doc": "<p>Build an index mapping from XDMF node order to MSH node order.</p>\n\n<p>For each coordinate triplet in <code>nodes_xdmf</code>, finds the row index in\n<code>nodes_msh</code> with the exact same coordinates and returns the list of\ncorresponding indices.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nodes_xdmf</strong> ((n_nodes, 3) ndarray of float):\nNode coordinates as read from an XDMF file.</li>\n<li><strong>nodes_msh</strong> ((n_nodes, 3) ndarray of float):\nNode coordinates as read from a .msh file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mapping</strong> (list of int):\nFor each row in <code>nodes_xdmf</code>, the index of the identical row in\n<code>nodes_msh</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This uses exact floating-point equality. If the two sources differ by\nround-off, consider a tolerance-based nearest matching instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nodes_xdmf</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">nodes_msh</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.find_closest_point", "modulename": "safeincave.PostProcessingTools", "qualname": "find_closest_point", "kind": "function", "doc": "<p>Find the index of the closest point in a set to a target point.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_point</strong> ((3,) ndarray of float):\nQuery point (x, y, z).</li>\n<li><strong>points</strong> ((n_points, 3) ndarray of float):\nCandidate points.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>idx</strong> (int):\nIndex of the closest point in <code>points</code> (Euclidean distance).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_point</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.compute_cell_centroids", "modulename": "safeincave.PostProcessingTools", "qualname": "compute_cell_centroids", "kind": "function", "doc": "<p>Compute centroids of tetrahedral cells.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong> ((n_cells, 4) ndarray of int):\nTetrahedral connectivity (node indices per cell).</li>\n<li><strong>points</strong> ((n_nodes, 3) ndarray of float):\nNode coordinates (x, y, z).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>centroids</strong> ((n_cells, 3) ndarray of float):\nCentroid coordinates for each cell, computed as the arithmetic mean\nof its four vertex coordinates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.read_cell_tensor", "modulename": "safeincave.PostProcessingTools", "qualname": "read_cell_tensor", "kind": "function", "doc": "<p>Read a time series of cell-centered 3x3 tensor fields from an XDMF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xdmf_field_path</strong> (str):\nPath to the XDMF file containing cell data (<code>cells['tetra']</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>centroids</strong> ((n_cells, 3) ndarray of float):\nCentroid coordinates of the tetrahedral cells.</li>\n<li><strong>time_list</strong> ((n_steps,) ndarray of float):\nTime values for each time step.</li>\n<li><strong>tensor_field</strong> ((n_steps, n_cells, 3, 3) ndarray of float):\nTensor values per time step and cell.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The function assumes a single tensor field is present under\n<code>cell_data['tetra']</code> at each time step, and reshapes it to (3, 3) per cell.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xdmf_field_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.read_cell_scalar", "modulename": "safeincave.PostProcessingTools", "qualname": "read_cell_scalar", "kind": "function", "doc": "<p>Read a time series of cell-centered scalar fields from an XDMF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xdmf_field_path</strong> (str):\nPath to the XDMF file containing cell data (<code>cells['tetra']</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>centroids</strong> ((n_cells, 3) ndarray of float):\nCentroid coordinates of the tetrahedral cells.</li>\n<li><strong>time_list</strong> ((n_steps,) ndarray of float):\nTime values for each time step.</li>\n<li><strong>scalar_field</strong> ((n_steps, n_cells) ndarray of float):\nScalar values per time step and cell.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The function assumes a single scalar field is present under\n<code>cell_data['tetra']</code> at each time step.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xdmf_field_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.read_node_scalar", "modulename": "safeincave.PostProcessingTools", "qualname": "read_node_scalar", "kind": "function", "doc": "<p>Read a time series of node-based scalar fields from an XDMF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xdmf_field_path</strong> (str):\nPath to the XDMF file containing point data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>points</strong> ((n_nodes, 3) ndarray of float):\nNode coordinates (x, y, z).</li>\n<li><strong>time_list</strong> ((n_steps,) ndarray of float):\nTime values for each time step.</li>\n<li><strong>scalar_field</strong> ((n_steps, n_nodes) ndarray of float):\nScalar values at nodes for each time step.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The function assumes a single scalar field exists in <code>point_data</code> at\neach time step and flattens it to 1D per step.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xdmf_field_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.PostProcessingTools.read_node_vector", "modulename": "safeincave.PostProcessingTools", "qualname": "read_node_vector", "kind": "function", "doc": "<p>Read a time series of node-based 3D vector fields from an XDMF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xdmf_field_path</strong> (str):\nPath to the XDMF file containing point data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>points</strong> ((n_nodes, 3) ndarray of float):\nNode coordinates (x, y, z).</li>\n<li><strong>time_list</strong> ((n_steps,) ndarray of float):\nTime values for each time step.</li>\n<li><strong>vector_field</strong> ((n_steps, n_nodes, 3) ndarray of float):\nVector values (vx, vy, vz) at nodes for each time step.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The function assumes a single vector field exists in <code>point_data</code> at\neach time step with shape <code>(n_nodes, 3)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xdmf_field_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils", "modulename": "safeincave.Utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safeincave.Utils.UFLVector3", "modulename": "safeincave.Utils", "qualname": "UFLVector3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ufl.core.expr.Expr&#x27;&gt;"}, {"fullname": "safeincave.Utils.UFLVector6", "modulename": "safeincave.Utils", "qualname": "UFLVector6", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ufl.core.expr.Expr&#x27;&gt;"}, {"fullname": "safeincave.Utils.UFLTensor3x3", "modulename": "safeincave.Utils", "qualname": "UFLTensor3x3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ufl.core.expr.Expr&#x27;&gt;"}, {"fullname": "safeincave.Utils.UFLMatrix6x6", "modulename": "safeincave.Utils", "qualname": "UFLMatrix6x6", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ufl.core.expr.Expr&#x27;&gt;"}, {"fullname": "safeincave.Utils.Fn", "modulename": "safeincave.Utils", "qualname": "Fn", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[float, float, float], float]"}, {"fullname": "safeincave.Utils.GPa", "modulename": "safeincave.Utils", "qualname": "GPa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000000.0"}, {"fullname": "safeincave.Utils.MPa", "modulename": "safeincave.Utils", "qualname": "MPa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "safeincave.Utils.kPa", "modulename": "safeincave.Utils", "qualname": "kPa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "safeincave.Utils.minute", "modulename": "safeincave.Utils", "qualname": "minute", "kind": "variable", "doc": "<p></p>\n", "default_value": "60"}, {"fullname": "safeincave.Utils.hour", "modulename": "safeincave.Utils", "qualname": "hour", "kind": "variable", "doc": "<p></p>\n", "default_value": "3600"}, {"fullname": "safeincave.Utils.day", "modulename": "safeincave.Utils", "qualname": "day", "kind": "variable", "doc": "<p></p>\n", "default_value": "86400"}, {"fullname": "safeincave.Utils.year", "modulename": "safeincave.Utils", "qualname": "year", "kind": "variable", "doc": "<p></p>\n", "default_value": "31536000"}, {"fullname": "safeincave.Utils.read_json", "modulename": "safeincave.Utils", "qualname": "read_json", "kind": "function", "doc": "<p>Read a JSON file into a Python dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong> (str):\nPath to the JSON file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Parsed JSON content.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.save_json", "modulename": "safeincave.Utils", "qualname": "save_json", "kind": "function", "doc": "<p>Save a Python dictionary to a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (dict):\nData to serialize as JSON.</li>\n<li><strong>file_name</strong> (str):\nOutput file path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses an indentation of 4 spaces for readability. Overwrites the\nfile if it already exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.project", "modulename": "safeincave.Utils", "qualname": "project", "kind": "function", "doc": "<p>Interpolate a UFL expression into a DOLFINx function space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tensor_ufl</strong> (ufl.core.expr.Expr):\nUFL expression to be interpolated (e.g., rank-2 tensor field).</li>\n<li><strong>V</strong> (dolfinx.fem.FunctionSpace):\nTarget function space. Its element must be compatible with the\nUFL expression shape.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dolfinx.fem.Function</strong>: Function in <code>V</code> obtained by interpolation of <code>tensor_ufl</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This uses <code>dolfinx.fem.Expression</code> with <code>V.element.interpolation_points()</code>\nand then calls <code>Function.interpolate(...)</code>. For non-interpolatory elements,\nprefer projection/solve-based approaches.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tensor_ufl</span><span class=\"p\">:</span> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>,</span><span class=\"param\">\t<span class=\"n\">V</span><span class=\"p\">:</span> <span class=\"n\">dolfinx</span><span class=\"o\">.</span><span class=\"n\">fem</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">FunctionSpace</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dolfinx</span><span class=\"o\">.</span><span class=\"n\">fem</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">Function</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.epsilon", "modulename": "safeincave.Utils", "qualname": "epsilon", "kind": "function", "doc": "<p>Small-strain tensor \\( \\varepsilon(u) = \\mathrm{sym}(\\nabla u) \\).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u</strong> (UFLVector3):\nDisplacement field as a UFL vector expression with shape (3,).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>UFLTensor3x3</strong>: Symmetric gradient of <code>u</code>, a (3, 3) UFL tensor.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError</strong>: If <code>u</code> is not rank-1 with shape (3,).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>UFLVector3 = ufl.core.expr.Expr</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">u</span><span class=\"p\">:</span> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.dotdot_ufl", "modulename": "safeincave.Utils", "qualname": "dotdot_ufl", "kind": "function", "doc": "<p>Compute stress \\( \\sigma = C : \\varepsilon \\) using Voigt mapping in UFL.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>C</strong> (UFLMatrix6x6):\nFourth-order stiffness tensor stored in Voigt form as a (6, 6) UFL object.\nAssumes <strong>tensorial Voigt</strong> convention (no engineering shear factors).</li>\n<li><strong>eps</strong> (UFLTensor3x3):\nSmall-strain tensor as a (3, 3) UFL expression.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>UFLTensor3x3</strong>: Cauchy stress tensor as a (3, 3) UFL expression.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError</strong>: If shapes are not <code>(6, 6)</code> for <code>C</code> or <code>(3, 3)</code> for <code>eps</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Internally computes <code>voigt2tensor(ufl.dot(C, tensor2voigt(eps)))</code>.\nUFLMatrix6x6 = ufl.core.expr.Expr\nUFLTensor3x3 = ufl.core.expr.Expr</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.tensor2voigt", "modulename": "safeincave.Utils", "qualname": "tensor2voigt", "kind": "function", "doc": "<p>Map a 3\u00d73 symmetric tensor to Voigt vector (tensorial Voigt).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong> (UFLTensor3x3):\nTensor expression with shape (3, 3). Symmetry is assumed but not enforced.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>UFLVector6</strong>: Voigt vector <code>[e_xx, e_yy, e_zz, e_xy, e_xz, e_yz]</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError</strong>: If <code>e</code> is not rank-2 with shape (3, 3).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>multiply the shear components by 0.5 when mapping back to tensor form.\nUFLTensor3x3 = ufl.core.expr.Expr</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.voigt2tensor", "modulename": "safeincave.Utils", "qualname": "voigt2tensor", "kind": "function", "doc": "<p>Map a Voigt vector (length 6) to a symmetric 3\u00d73 tensor (tensorial Voigt).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s</strong> (UFLVector6):\nVoigt vector <code>[xx, yy, zz, xy, xz, yz]</code> (no engineering shear factors).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>UFLTensor3x3</strong>: Symmetric (3, 3) tensor reconstructed from <code>s</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError</strong>: If the UFL shape of <code>s</code> is not <code>(6,)</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>UFLVector6 = ufl.core.expr.Expr\nUFLTensor3x3 = ufl.core.expr.Expr</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ufl</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.numpy2torch", "modulename": "safeincave.Utils", "qualname": "numpy2torch", "kind": "function", "doc": "<p>Convert a NumPy array to a <code>torch.Tensor</code> with dtype <code>torch.float64</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>numpy_array</strong> (numpy.typing.NDArray[numpy.float64]):\nInput NumPy array of any shape.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Tensor with the same shape as <code>numpy_array</code>, cast to <code>torch.float64</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses <code>torch.tensor</code>, which <strong>copies</strong> data. For zero-copy semantics,\nprefer <code>torch.from_numpy(numpy_array)</code> when the dtype is already <code>float64</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numpy_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.dotdot_torch", "modulename": "safeincave.Utils", "qualname": "dotdot_torch", "kind": "function", "doc": "<p>\u03c3 = C : \u03b5 using Voigt notation (tensorial Voigt, no engineering factors).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>C_voigt</strong> ((N, 6, 6) torch.Tensor (float64)):\nStiffness matrix per element in tensorial Voigt order [xx, yy, zz, xy, xz, yz].</li>\n<li><strong>eps_tensor</strong> ((N, 3, 3) torch.Tensor (float64)):\nSmall-strain tensor per element.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>(N, 3, 3) torch.Tensor (float64)</strong>: Cauchy stress tensor per element.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">C_voigt</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">eps_tensor</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.create_field_nodes", "modulename": "safeincave.Utils", "qualname": "create_field_nodes", "kind": "function", "doc": "<p>Sample a scalar field at mesh nodes using a Python callable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grid</strong> (GridHandlerGMSH):\nGrid handler with attributes <code>mesh</code> and <code>n_nodes</code>. Assumes\n<code>grid.mesh.geometry.x</code> provides an array of node coordinates of shape (N, 3).</li>\n<li><strong>fun</strong> (Callable[[float, float, float], float]):\nFunction evaluated as <code>fun(x, y, z)</code> at each node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: 1D tensor of length <code>grid.n_nodes</code> with dtype <code>torch.float64</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This evaluates <code>fun</code> in a Python loop; it is not vectorized.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">Grid</span><span class=\"o\">.</span><span class=\"n\">GridHandlerGMSH</span>,</span><span class=\"param\">\t<span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "safeincave.Utils.create_field_elems", "modulename": "safeincave.Utils", "qualname": "create_field_elems", "kind": "function", "doc": "<p>Sample a scalar field at element centroids using a Python callable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grid</strong> (GridHandlerGMSH):\nGrid handler with attributes <code>mesh</code> and <code>n_elems</code>. Assumes a tetrahedral\nmesh where the 3\u21920 connectivity returns 4 vertex indices per cell.</li>\n<li><strong>fun</strong> (Callable[[float, float, float], float]):\nFunction evaluated as <code>fun(x, y, z)</code> at each cell centroid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: 1D tensor of length <code>grid.n_elems</code> with dtype <code>torch.float64</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The centroid is computed as the arithmetic mean of the 4 vertex coordinates\nfor each tetrahedral cell. This evaluates <code>fun</code> in a Python loop.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">safeincave</span><span class=\"o\">.</span><span class=\"n\">Grid</span><span class=\"o\">.</span><span class=\"n\">GridHandlerGMSH</span>,</span><span class=\"param\">\t<span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();